                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _eebyter
                                     13 	.globl _eebytew
                                     14 	.globl _RepeatedStartI2c
                                     15 	.globl _I2C_Stop
                                     16 	.globl _I2C_ReStart
                                     17 	.globl _I2C_Send_ACK
                                     18 	.globl _I2C_Read_Byte
                                     19 	.globl _I2C_Write_Byte
                                     20 	.globl _I2C_Start
                                     21 	.globl _I2C_init
                                     22 	.globl _delay
                                     23 	.globl _printf
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _F1
                                     31 	.globl _P
                                     32 	.globl _PS
                                     33 	.globl _PT1
                                     34 	.globl _PX1
                                     35 	.globl _PT0
                                     36 	.globl _PX0
                                     37 	.globl _RD
                                     38 	.globl _WR
                                     39 	.globl _T1
                                     40 	.globl _T0
                                     41 	.globl _INT1
                                     42 	.globl _INT0
                                     43 	.globl _TXD
                                     44 	.globl _RXD
                                     45 	.globl _P3_7
                                     46 	.globl _P3_6
                                     47 	.globl _P3_5
                                     48 	.globl _P3_4
                                     49 	.globl _P3_3
                                     50 	.globl _P3_2
                                     51 	.globl _P3_1
                                     52 	.globl _P3_0
                                     53 	.globl _EA
                                     54 	.globl _ES
                                     55 	.globl _ET1
                                     56 	.globl _EX1
                                     57 	.globl _ET0
                                     58 	.globl _EX0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _SM0
                                     68 	.globl _SM1
                                     69 	.globl _SM2
                                     70 	.globl _REN
                                     71 	.globl _TB8
                                     72 	.globl _RB8
                                     73 	.globl _TI
                                     74 	.globl _RI
                                     75 	.globl _P1_7
                                     76 	.globl _P1_6
                                     77 	.globl _P1_5
                                     78 	.globl _P1_4
                                     79 	.globl _P1_3
                                     80 	.globl _P1_2
                                     81 	.globl _P1_1
                                     82 	.globl _P1_0
                                     83 	.globl _TF1
                                     84 	.globl _TR1
                                     85 	.globl _TF0
                                     86 	.globl _TR0
                                     87 	.globl _IE1
                                     88 	.globl _IT1
                                     89 	.globl _IE0
                                     90 	.globl _IT0
                                     91 	.globl _P0_7
                                     92 	.globl _P0_6
                                     93 	.globl _P0_5
                                     94 	.globl _P0_4
                                     95 	.globl _P0_3
                                     96 	.globl _P0_2
                                     97 	.globl _P0_1
                                     98 	.globl _P0_0
                                     99 	.globl _TF2
                                    100 	.globl _EXF2
                                    101 	.globl _RCLK
                                    102 	.globl _TCLK
                                    103 	.globl _EXEN2
                                    104 	.globl _TR2
                                    105 	.globl _C_T2
                                    106 	.globl _CP_RL2
                                    107 	.globl _T2CON_7
                                    108 	.globl _T2CON_6
                                    109 	.globl _T2CON_5
                                    110 	.globl _T2CON_4
                                    111 	.globl _T2CON_3
                                    112 	.globl _T2CON_2
                                    113 	.globl _T2CON_1
                                    114 	.globl _T2CON_0
                                    115 	.globl _PT2
                                    116 	.globl _ET2
                                    117 	.globl _TXD0
                                    118 	.globl _RXD0
                                    119 	.globl _BREG_F7
                                    120 	.globl _BREG_F6
                                    121 	.globl _BREG_F5
                                    122 	.globl _BREG_F4
                                    123 	.globl _BREG_F3
                                    124 	.globl _BREG_F2
                                    125 	.globl _BREG_F1
                                    126 	.globl _BREG_F0
                                    127 	.globl _P5_7
                                    128 	.globl _P5_6
                                    129 	.globl _P5_5
                                    130 	.globl _P5_4
                                    131 	.globl _P5_3
                                    132 	.globl _P5_2
                                    133 	.globl _P5_1
                                    134 	.globl _P5_0
                                    135 	.globl _P4_7
                                    136 	.globl _P4_6
                                    137 	.globl _P4_5
                                    138 	.globl _P4_4
                                    139 	.globl _P4_3
                                    140 	.globl _P4_2
                                    141 	.globl _P4_1
                                    142 	.globl _P4_0
                                    143 	.globl _PX0L
                                    144 	.globl _PT0L
                                    145 	.globl _PX1L
                                    146 	.globl _PT1L
                                    147 	.globl _PSL
                                    148 	.globl _PT2L
                                    149 	.globl _PPCL
                                    150 	.globl _EC
                                    151 	.globl _CCF0
                                    152 	.globl _CCF1
                                    153 	.globl _CCF2
                                    154 	.globl _CCF3
                                    155 	.globl _CCF4
                                    156 	.globl _CR
                                    157 	.globl _CF
                                    158 	.globl _B
                                    159 	.globl _ACC
                                    160 	.globl _PSW
                                    161 	.globl _IP
                                    162 	.globl _P3
                                    163 	.globl _IE
                                    164 	.globl _P2
                                    165 	.globl _SBUF
                                    166 	.globl _SCON
                                    167 	.globl _P1
                                    168 	.globl _TH1
                                    169 	.globl _TH0
                                    170 	.globl _TL1
                                    171 	.globl _TL0
                                    172 	.globl _TMOD
                                    173 	.globl _TCON
                                    174 	.globl _PCON
                                    175 	.globl _DPH
                                    176 	.globl _DPL
                                    177 	.globl _SP
                                    178 	.globl _P0
                                    179 	.globl _TH2
                                    180 	.globl _TL2
                                    181 	.globl _RCAP2H
                                    182 	.globl _RCAP2L
                                    183 	.globl _T2CON
                                    184 	.globl _SBUF0
                                    185 	.globl _DP0L
                                    186 	.globl _DP0H
                                    187 	.globl _EECON
                                    188 	.globl _KBF
                                    189 	.globl _KBE
                                    190 	.globl _KBLS
                                    191 	.globl _BRL
                                    192 	.globl _BDRCON
                                    193 	.globl _T2MOD
                                    194 	.globl _SPDAT
                                    195 	.globl _SPSTA
                                    196 	.globl _SPCON
                                    197 	.globl _SADEN
                                    198 	.globl _SADDR
                                    199 	.globl _WDTPRG
                                    200 	.globl _WDTRST
                                    201 	.globl _P5
                                    202 	.globl _P4
                                    203 	.globl _IPH1
                                    204 	.globl _IPL1
                                    205 	.globl _IPH0
                                    206 	.globl _IPL0
                                    207 	.globl _IEN1
                                    208 	.globl _IEN0
                                    209 	.globl _CMOD
                                    210 	.globl _CL
                                    211 	.globl _CH
                                    212 	.globl _CCON
                                    213 	.globl _CCAPM4
                                    214 	.globl _CCAPM3
                                    215 	.globl _CCAPM2
                                    216 	.globl _CCAPM1
                                    217 	.globl _CCAPM0
                                    218 	.globl _CCAP4L
                                    219 	.globl _CCAP3L
                                    220 	.globl _CCAP2L
                                    221 	.globl _CCAP1L
                                    222 	.globl _CCAP0L
                                    223 	.globl _CCAP4H
                                    224 	.globl _CCAP3H
                                    225 	.globl _CCAP2H
                                    226 	.globl _CCAP1H
                                    227 	.globl _CCAP0H
                                    228 	.globl _CKCON1
                                    229 	.globl _CKCON0
                                    230 	.globl _CKRL
                                    231 	.globl _AUXR1
                                    232 	.globl _AUXR
                                    233 	.globl _eebytew_PARM_2
                                    234 	.globl _getchar
                                    235 	.globl _putchar
                                    236 ;--------------------------------------------------------
                                    237 ; special function registers
                                    238 ;--------------------------------------------------------
                                    239 	.area RSEG    (ABS,DATA)
      000000                        240 	.org 0x0000
                           00008E   241 _AUXR	=	0x008e
                           0000A2   242 _AUXR1	=	0x00a2
                           000097   243 _CKRL	=	0x0097
                           00008F   244 _CKCON0	=	0x008f
                           0000AF   245 _CKCON1	=	0x00af
                           0000FA   246 _CCAP0H	=	0x00fa
                           0000FB   247 _CCAP1H	=	0x00fb
                           0000FC   248 _CCAP2H	=	0x00fc
                           0000FD   249 _CCAP3H	=	0x00fd
                           0000FE   250 _CCAP4H	=	0x00fe
                           0000EA   251 _CCAP0L	=	0x00ea
                           0000EB   252 _CCAP1L	=	0x00eb
                           0000EC   253 _CCAP2L	=	0x00ec
                           0000ED   254 _CCAP3L	=	0x00ed
                           0000EE   255 _CCAP4L	=	0x00ee
                           0000DA   256 _CCAPM0	=	0x00da
                           0000DB   257 _CCAPM1	=	0x00db
                           0000DC   258 _CCAPM2	=	0x00dc
                           0000DD   259 _CCAPM3	=	0x00dd
                           0000DE   260 _CCAPM4	=	0x00de
                           0000D8   261 _CCON	=	0x00d8
                           0000F9   262 _CH	=	0x00f9
                           0000E9   263 _CL	=	0x00e9
                           0000D9   264 _CMOD	=	0x00d9
                           0000A8   265 _IEN0	=	0x00a8
                           0000B1   266 _IEN1	=	0x00b1
                           0000B8   267 _IPL0	=	0x00b8
                           0000B7   268 _IPH0	=	0x00b7
                           0000B2   269 _IPL1	=	0x00b2
                           0000B3   270 _IPH1	=	0x00b3
                           0000C0   271 _P4	=	0x00c0
                           0000E8   272 _P5	=	0x00e8
                           0000A6   273 _WDTRST	=	0x00a6
                           0000A7   274 _WDTPRG	=	0x00a7
                           0000A9   275 _SADDR	=	0x00a9
                           0000B9   276 _SADEN	=	0x00b9
                           0000C3   277 _SPCON	=	0x00c3
                           0000C4   278 _SPSTA	=	0x00c4
                           0000C5   279 _SPDAT	=	0x00c5
                           0000C9   280 _T2MOD	=	0x00c9
                           00009B   281 _BDRCON	=	0x009b
                           00009A   282 _BRL	=	0x009a
                           00009C   283 _KBLS	=	0x009c
                           00009D   284 _KBE	=	0x009d
                           00009E   285 _KBF	=	0x009e
                           0000D2   286 _EECON	=	0x00d2
                           000083   287 _DP0H	=	0x0083
                           000082   288 _DP0L	=	0x0082
                           000099   289 _SBUF0	=	0x0099
                           0000C8   290 _T2CON	=	0x00c8
                           0000CA   291 _RCAP2L	=	0x00ca
                           0000CB   292 _RCAP2H	=	0x00cb
                           0000CC   293 _TL2	=	0x00cc
                           0000CD   294 _TH2	=	0x00cd
                           000080   295 _P0	=	0x0080
                           000081   296 _SP	=	0x0081
                           000082   297 _DPL	=	0x0082
                           000083   298 _DPH	=	0x0083
                           000087   299 _PCON	=	0x0087
                           000088   300 _TCON	=	0x0088
                           000089   301 _TMOD	=	0x0089
                           00008A   302 _TL0	=	0x008a
                           00008B   303 _TL1	=	0x008b
                           00008C   304 _TH0	=	0x008c
                           00008D   305 _TH1	=	0x008d
                           000090   306 _P1	=	0x0090
                           000098   307 _SCON	=	0x0098
                           000099   308 _SBUF	=	0x0099
                           0000A0   309 _P2	=	0x00a0
                           0000A8   310 _IE	=	0x00a8
                           0000B0   311 _P3	=	0x00b0
                           0000B8   312 _IP	=	0x00b8
                           0000D0   313 _PSW	=	0x00d0
                           0000E0   314 _ACC	=	0x00e0
                           0000F0   315 _B	=	0x00f0
                                    316 ;--------------------------------------------------------
                                    317 ; special function bits
                                    318 ;--------------------------------------------------------
                                    319 	.area RSEG    (ABS,DATA)
      000000                        320 	.org 0x0000
                           0000DF   321 _CF	=	0x00df
                           0000DE   322 _CR	=	0x00de
                           0000DC   323 _CCF4	=	0x00dc
                           0000DB   324 _CCF3	=	0x00db
                           0000DA   325 _CCF2	=	0x00da
                           0000D9   326 _CCF1	=	0x00d9
                           0000D8   327 _CCF0	=	0x00d8
                           0000AE   328 _EC	=	0x00ae
                           0000BE   329 _PPCL	=	0x00be
                           0000BD   330 _PT2L	=	0x00bd
                           0000BC   331 _PSL	=	0x00bc
                           0000BB   332 _PT1L	=	0x00bb
                           0000BA   333 _PX1L	=	0x00ba
                           0000B9   334 _PT0L	=	0x00b9
                           0000B8   335 _PX0L	=	0x00b8
                           0000C0   336 _P4_0	=	0x00c0
                           0000C1   337 _P4_1	=	0x00c1
                           0000C2   338 _P4_2	=	0x00c2
                           0000C3   339 _P4_3	=	0x00c3
                           0000C4   340 _P4_4	=	0x00c4
                           0000C5   341 _P4_5	=	0x00c5
                           0000C6   342 _P4_6	=	0x00c6
                           0000C7   343 _P4_7	=	0x00c7
                           0000E8   344 _P5_0	=	0x00e8
                           0000E9   345 _P5_1	=	0x00e9
                           0000EA   346 _P5_2	=	0x00ea
                           0000EB   347 _P5_3	=	0x00eb
                           0000EC   348 _P5_4	=	0x00ec
                           0000ED   349 _P5_5	=	0x00ed
                           0000EE   350 _P5_6	=	0x00ee
                           0000EF   351 _P5_7	=	0x00ef
                           0000F0   352 _BREG_F0	=	0x00f0
                           0000F1   353 _BREG_F1	=	0x00f1
                           0000F2   354 _BREG_F2	=	0x00f2
                           0000F3   355 _BREG_F3	=	0x00f3
                           0000F4   356 _BREG_F4	=	0x00f4
                           0000F5   357 _BREG_F5	=	0x00f5
                           0000F6   358 _BREG_F6	=	0x00f6
                           0000F7   359 _BREG_F7	=	0x00f7
                           0000B0   360 _RXD0	=	0x00b0
                           0000B1   361 _TXD0	=	0x00b1
                           0000AD   362 _ET2	=	0x00ad
                           0000BD   363 _PT2	=	0x00bd
                           0000C8   364 _T2CON_0	=	0x00c8
                           0000C9   365 _T2CON_1	=	0x00c9
                           0000CA   366 _T2CON_2	=	0x00ca
                           0000CB   367 _T2CON_3	=	0x00cb
                           0000CC   368 _T2CON_4	=	0x00cc
                           0000CD   369 _T2CON_5	=	0x00cd
                           0000CE   370 _T2CON_6	=	0x00ce
                           0000CF   371 _T2CON_7	=	0x00cf
                           0000C8   372 _CP_RL2	=	0x00c8
                           0000C9   373 _C_T2	=	0x00c9
                           0000CA   374 _TR2	=	0x00ca
                           0000CB   375 _EXEN2	=	0x00cb
                           0000CC   376 _TCLK	=	0x00cc
                           0000CD   377 _RCLK	=	0x00cd
                           0000CE   378 _EXF2	=	0x00ce
                           0000CF   379 _TF2	=	0x00cf
                           000080   380 _P0_0	=	0x0080
                           000081   381 _P0_1	=	0x0081
                           000082   382 _P0_2	=	0x0082
                           000083   383 _P0_3	=	0x0083
                           000084   384 _P0_4	=	0x0084
                           000085   385 _P0_5	=	0x0085
                           000086   386 _P0_6	=	0x0086
                           000087   387 _P0_7	=	0x0087
                           000088   388 _IT0	=	0x0088
                           000089   389 _IE0	=	0x0089
                           00008A   390 _IT1	=	0x008a
                           00008B   391 _IE1	=	0x008b
                           00008C   392 _TR0	=	0x008c
                           00008D   393 _TF0	=	0x008d
                           00008E   394 _TR1	=	0x008e
                           00008F   395 _TF1	=	0x008f
                           000090   396 _P1_0	=	0x0090
                           000091   397 _P1_1	=	0x0091
                           000092   398 _P1_2	=	0x0092
                           000093   399 _P1_3	=	0x0093
                           000094   400 _P1_4	=	0x0094
                           000095   401 _P1_5	=	0x0095
                           000096   402 _P1_6	=	0x0096
                           000097   403 _P1_7	=	0x0097
                           000098   404 _RI	=	0x0098
                           000099   405 _TI	=	0x0099
                           00009A   406 _RB8	=	0x009a
                           00009B   407 _TB8	=	0x009b
                           00009C   408 _REN	=	0x009c
                           00009D   409 _SM2	=	0x009d
                           00009E   410 _SM1	=	0x009e
                           00009F   411 _SM0	=	0x009f
                           0000A0   412 _P2_0	=	0x00a0
                           0000A1   413 _P2_1	=	0x00a1
                           0000A2   414 _P2_2	=	0x00a2
                           0000A3   415 _P2_3	=	0x00a3
                           0000A4   416 _P2_4	=	0x00a4
                           0000A5   417 _P2_5	=	0x00a5
                           0000A6   418 _P2_6	=	0x00a6
                           0000A7   419 _P2_7	=	0x00a7
                           0000A8   420 _EX0	=	0x00a8
                           0000A9   421 _ET0	=	0x00a9
                           0000AA   422 _EX1	=	0x00aa
                           0000AB   423 _ET1	=	0x00ab
                           0000AC   424 _ES	=	0x00ac
                           0000AF   425 _EA	=	0x00af
                           0000B0   426 _P3_0	=	0x00b0
                           0000B1   427 _P3_1	=	0x00b1
                           0000B2   428 _P3_2	=	0x00b2
                           0000B3   429 _P3_3	=	0x00b3
                           0000B4   430 _P3_4	=	0x00b4
                           0000B5   431 _P3_5	=	0x00b5
                           0000B6   432 _P3_6	=	0x00b6
                           0000B7   433 _P3_7	=	0x00b7
                           0000B0   434 _RXD	=	0x00b0
                           0000B1   435 _TXD	=	0x00b1
                           0000B2   436 _INT0	=	0x00b2
                           0000B3   437 _INT1	=	0x00b3
                           0000B4   438 _T0	=	0x00b4
                           0000B5   439 _T1	=	0x00b5
                           0000B6   440 _WR	=	0x00b6
                           0000B7   441 _RD	=	0x00b7
                           0000B8   442 _PX0	=	0x00b8
                           0000B9   443 _PT0	=	0x00b9
                           0000BA   444 _PX1	=	0x00ba
                           0000BB   445 _PT1	=	0x00bb
                           0000BC   446 _PS	=	0x00bc
                           0000D0   447 _P	=	0x00d0
                           0000D1   448 _F1	=	0x00d1
                           0000D2   449 _OV	=	0x00d2
                           0000D3   450 _RS0	=	0x00d3
                           0000D4   451 _RS1	=	0x00d4
                           0000D5   452 _F0	=	0x00d5
                           0000D6   453 _AC	=	0x00d6
                           0000D7   454 _CY	=	0x00d7
                                    455 ;--------------------------------------------------------
                                    456 ; overlayable register banks
                                    457 ;--------------------------------------------------------
                                    458 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        459 	.ds 8
                                    460 ;--------------------------------------------------------
                                    461 ; internal ram data
                                    462 ;--------------------------------------------------------
                                    463 	.area DSEG    (DATA)
      000000                        464 _eebytew_PARM_2:
      000000                        465 	.ds 1
      000001                        466 _main_addr_131072_47:
      000001                        467 	.ds 2
      000003                        468 _main_start_addr_131072_47:
      000003                        469 	.ds 2
      000005                        470 _main_end_addr_131072_47:
      000005                        471 	.ds 2
      000007                        472 _main_data_131072_47:
      000007                        473 	.ds 2
                                    474 ;--------------------------------------------------------
                                    475 ; overlayable items in internal ram
                                    476 ;--------------------------------------------------------
                                    477 	.area	OSEG    (OVR,DATA)
                                    478 	.area	OSEG    (OVR,DATA)
                                    479 ;--------------------------------------------------------
                                    480 ; Stack segment in internal ram
                                    481 ;--------------------------------------------------------
                                    482 	.area	SSEG
      000000                        483 __start__stack:
      000000                        484 	.ds	1
                                    485 
                                    486 ;--------------------------------------------------------
                                    487 ; indirectly addressable internal ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area ISEG    (DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; absolute internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area IABS    (ABS,DATA)
                                    494 	.area IABS    (ABS,DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; bit data
                                    497 ;--------------------------------------------------------
                                    498 	.area BSEG    (BIT)
                                    499 ;--------------------------------------------------------
                                    500 ; paged external ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area PSEG    (PAG,XDATA)
                                    503 ;--------------------------------------------------------
                                    504 ; external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area XSEG    (XDATA)
                                    507 ;--------------------------------------------------------
                                    508 ; absolute external ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area XABS    (ABS,XDATA)
                                    511 ;--------------------------------------------------------
                                    512 ; external initialized ram data
                                    513 ;--------------------------------------------------------
                                    514 	.area XISEG   (XDATA)
                                    515 	.area HOME    (CODE)
                                    516 	.area GSINIT0 (CODE)
                                    517 	.area GSINIT1 (CODE)
                                    518 	.area GSINIT2 (CODE)
                                    519 	.area GSINIT3 (CODE)
                                    520 	.area GSINIT4 (CODE)
                                    521 	.area GSINIT5 (CODE)
                                    522 	.area GSINIT  (CODE)
                                    523 	.area GSFINAL (CODE)
                                    524 	.area CSEG    (CODE)
                                    525 ;--------------------------------------------------------
                                    526 ; interrupt vector
                                    527 ;--------------------------------------------------------
                                    528 	.area HOME    (CODE)
      000000                        529 __interrupt_vect:
      000000 02r00r00         [24]  530 	ljmp	__sdcc_gsinit_startup
                                    531 ;--------------------------------------------------------
                                    532 ; global & static initialisations
                                    533 ;--------------------------------------------------------
                                    534 	.area HOME    (CODE)
                                    535 	.area GSINIT  (CODE)
                                    536 	.area GSFINAL (CODE)
                                    537 	.area GSINIT  (CODE)
                                    538 	.globl __sdcc_gsinit_startup
                                    539 	.globl __sdcc_program_startup
                                    540 	.globl __start__stack
                                    541 	.globl __mcs51_genXINIT
                                    542 	.globl __mcs51_genXRAMCLEAR
                                    543 	.globl __mcs51_genRAMCLEAR
                                    544 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  545 	ljmp	__sdcc_program_startup
                                    546 ;--------------------------------------------------------
                                    547 ; Home
                                    548 ;--------------------------------------------------------
                                    549 	.area HOME    (CODE)
                                    550 	.area HOME    (CODE)
      000003                        551 __sdcc_program_startup:
      000003 02r01rD1         [24]  552 	ljmp	_main
                                    553 ;	return from main will return to caller
                                    554 ;--------------------------------------------------------
                                    555 ; code
                                    556 ;--------------------------------------------------------
                                    557 	.area CSEG    (CODE)
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'getchar'
                                    560 ;------------------------------------------------------------
                                    561 ;	main.c:17: int getchar (void)
                                    562 ;	-----------------------------------------
                                    563 ;	 function getchar
                                    564 ;	-----------------------------------------
      000000                        565 _getchar:
                           000007   566 	ar7 = 0x07
                           000006   567 	ar6 = 0x06
                           000005   568 	ar5 = 0x05
                           000004   569 	ar4 = 0x04
                           000003   570 	ar3 = 0x03
                           000002   571 	ar2 = 0x02
                           000001   572 	ar1 = 0x01
                           000000   573 	ar0 = 0x00
                                    574 ;	main.c:19: while (!RI);
      000000                        575 00101$:
                                    576 ;	main.c:21: RI = 0;                         // clear RI flag
                                    577 ;	assignBit
      000000 10 98 02         [24]  578 	jbc	_RI,00114$
      000003 80 FB            [24]  579 	sjmp	00101$
      000005                        580 00114$:
                                    581 ;	main.c:22: return SBUF;                    // return character from SBUF
      000005 AE 99            [24]  582 	mov	r6,_SBUF
      000007 7F 00            [12]  583 	mov	r7,#0x00
      000009 8E 82            [24]  584 	mov	dpl,r6
      00000B 8F 83            [24]  585 	mov	dph,r7
                                    586 ;	main.c:23: }
      00000D 22               [24]  587 	ret
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'putchar'
                                    590 ;------------------------------------------------------------
                                    591 ;c                         Allocated to registers r6 r7 
                                    592 ;------------------------------------------------------------
                                    593 ;	main.c:25: int putchar (int c)
                                    594 ;	-----------------------------------------
                                    595 ;	 function putchar
                                    596 ;	-----------------------------------------
      00000E                        597 _putchar:
      00000E AE 82            [24]  598 	mov	r6,dpl
      000010 AF 83            [24]  599 	mov	r7,dph
                                    600 ;	main.c:27: while (!TI);
      000012                        601 00101$:
      000012 30 99 FD         [24]  602 	jnb	_TI,00101$
                                    603 ;	main.c:29: SBUF = c;           // load serial port with transmit value
      000015 8E 99            [24]  604 	mov	_SBUF,r6
                                    605 ;	main.c:30: TI = 0;             // clear TI flag
                                    606 ;	assignBit
      000017 C2 99            [12]  607 	clr	_TI
                                    608 ;	main.c:32: return c;
      000019 8E 82            [24]  609 	mov	dpl,r6
      00001B 8F 83            [24]  610 	mov	dph,r7
                                    611 ;	main.c:33: }
      00001D 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'delay'
                                    615 ;------------------------------------------------------------
                                    616 ;count                     Allocated to registers r6 r7 
                                    617 ;i                         Allocated to registers r4 r5 
                                    618 ;------------------------------------------------------------
                                    619 ;	main.c:36: void delay(unsigned int count)
                                    620 ;	-----------------------------------------
                                    621 ;	 function delay
                                    622 ;	-----------------------------------------
      00001E                        623 _delay:
      00001E AE 82            [24]  624 	mov	r6,dpl
      000020 AF 83            [24]  625 	mov	r7,dph
                                    626 ;	main.c:39: for(i=0;i<count;i++);
      000022 7C 00            [12]  627 	mov	r4,#0x00
      000024 7D 00            [12]  628 	mov	r5,#0x00
      000026                        629 00103$:
      000026 C3               [12]  630 	clr	c
      000027 EC               [12]  631 	mov	a,r4
      000028 9E               [12]  632 	subb	a,r6
      000029 ED               [12]  633 	mov	a,r5
      00002A 9F               [12]  634 	subb	a,r7
      00002B 50 07            [24]  635 	jnc	00105$
      00002D 0C               [12]  636 	inc	r4
      00002E BC 00 F5         [24]  637 	cjne	r4,#0x00,00103$
      000031 0D               [12]  638 	inc	r5
      000032 80 F2            [24]  639 	sjmp	00103$
      000034                        640 00105$:
                                    641 ;	main.c:40: }
      000034 22               [24]  642 	ret
                                    643 ;------------------------------------------------------------
                                    644 ;Allocation info for local variables in function 'I2C_init'
                                    645 ;------------------------------------------------------------
                                    646 ;	main.c:44: void I2C_init(void)
                                    647 ;	-----------------------------------------
                                    648 ;	 function I2C_init
                                    649 ;	-----------------------------------------
      000035                        650 _I2C_init:
                                    651 ;	main.c:47: SDA = 1;
                                    652 ;	assignBit
      000035 D2 97            [12]  653 	setb	_P1_7
                                    654 ;	main.c:48: SCL = 1;
                                    655 ;	assignBit
      000037 D2 96            [12]  656 	setb	_P1_6
                                    657 ;	main.c:49: }
      000039 22               [24]  658 	ret
                                    659 ;------------------------------------------------------------
                                    660 ;Allocation info for local variables in function 'I2C_Start'
                                    661 ;------------------------------------------------------------
                                    662 ;	main.c:52: void I2C_Start(void)
                                    663 ;	-----------------------------------------
                                    664 ;	 function I2C_Start
                                    665 ;	-----------------------------------------
      00003A                        666 _I2C_Start:
                                    667 ;	main.c:54: set_SCL_high;				// Make SCL pin high
                                    668 ;	assignBit
      00003A D2 96            [12]  669 	setb	_P1_6
                                    670 ;	main.c:55: set_SDA_high;				// Make SDA pin High
                                    671 ;	assignBit
      00003C D2 97            [12]  672 	setb	_P1_7
                                    673 ;	main.c:56: delay(50);	// Half bit delay
      00003E 90 00 32         [24]  674 	mov	dptr,#0x0032
      000041 12r00r1E         [24]  675 	lcall	_delay
                                    676 ;	main.c:57: set_SDA_low;				// Make SDA Low
                                    677 ;	assignBit
      000044 C2 97            [12]  678 	clr	_P1_7
                                    679 ;	main.c:58: delay(50);	// Half bit delay
      000046 90 00 32         [24]  680 	mov	dptr,#0x0032
                                    681 ;	main.c:59: }
      000049 02r00r1E         [24]  682 	ljmp	_delay
                                    683 ;------------------------------------------------------------
                                    684 ;Allocation info for local variables in function 'I2C_Write_Byte'
                                    685 ;------------------------------------------------------------
                                    686 ;Byte                      Allocated to registers r7 
                                    687 ;i                         Allocated to registers r6 
                                    688 ;------------------------------------------------------------
                                    689 ;	main.c:61: unsigned char I2C_Write_Byte(unsigned char Byte)
                                    690 ;	-----------------------------------------
                                    691 ;	 function I2C_Write_Byte
                                    692 ;	-----------------------------------------
      00004C                        693 _I2C_Write_Byte:
      00004C AF 82            [24]  694 	mov	r7,dpl
                                    695 ;	main.c:65: for(i=0;i<8;i++)		// Repeat for every bit
      00004E 7E 00            [12]  696 	mov	r6,#0x00
      000050                        697 00105$:
                                    698 ;	main.c:67: set_SCL_low;		// Make SCL pin low
                                    699 ;	assignBit
      000050 C2 96            [12]  700 	clr	_P1_6
                                    701 ;	main.c:69: delay(50);	// Data pin should change it's value,
      000052 90 00 32         [24]  702 	mov	dptr,#0x0032
      000055 C0 07            [24]  703 	push	ar7
      000057 C0 06            [24]  704 	push	ar6
      000059 12r00r1E         [24]  705 	lcall	_delay
      00005C D0 06            [24]  706 	pop	ar6
      00005E D0 07            [24]  707 	pop	ar7
                                    708 ;	main.c:72: if((Byte<<i)&0x80)  // Place data bit value on SDA pin
      000060 8F 04            [24]  709 	mov	ar4,r7
      000062 7D 00            [12]  710 	mov	r5,#0x00
      000064 8E F0            [24]  711 	mov	b,r6
      000066 05 F0            [12]  712 	inc	b
      000068 80 06            [24]  713 	sjmp	00123$
      00006A                        714 00122$:
      00006A EC               [12]  715 	mov	a,r4
      00006B 2C               [12]  716 	add	a,r4
      00006C FC               [12]  717 	mov	r4,a
      00006D ED               [12]  718 	mov	a,r5
      00006E 33               [12]  719 	rlc	a
      00006F FD               [12]  720 	mov	r5,a
      000070                        721 00123$:
      000070 D5 F0 F7         [24]  722 	djnz	b,00122$
      000073 EC               [12]  723 	mov	a,r4
      000074 30 E7 04         [24]  724 	jnb	acc.7,00102$
                                    725 ;	main.c:73: set_SDA_high;	// If bit is high, make SDA high
                                    726 ;	assignBit
      000077 D2 97            [12]  727 	setb	_P1_7
      000079 80 02            [24]  728 	sjmp	00103$
      00007B                        729 00102$:
                                    730 ;	main.c:75: set_SDA_low;	// If bit is low, make SDA low
                                    731 ;	assignBit
      00007B C2 97            [12]  732 	clr	_P1_7
      00007D                        733 00103$:
                                    734 ;	main.c:77: delay(50);	// Toggle SCL pin
      00007D 90 00 32         [24]  735 	mov	dptr,#0x0032
      000080 C0 07            [24]  736 	push	ar7
      000082 C0 06            [24]  737 	push	ar6
      000084 12r00r1E         [24]  738 	lcall	_delay
                                    739 ;	main.c:78: set_SCL_high;				// So that slave can
                                    740 ;	assignBit
      000087 D2 96            [12]  741 	setb	_P1_6
                                    742 ;	main.c:79: delay(50);	// latch data bit
      000089 90 00 32         [24]  743 	mov	dptr,#0x0032
      00008C 12r00r1E         [24]  744 	lcall	_delay
      00008F D0 06            [24]  745 	pop	ar6
      000091 D0 07            [24]  746 	pop	ar7
                                    747 ;	main.c:65: for(i=0;i<8;i++)		// Repeat for every bit
      000093 0E               [12]  748 	inc	r6
      000094 BE 08 00         [24]  749 	cjne	r6,#0x08,00125$
      000097                        750 00125$:
      000097 40 B7            [24]  751 	jc	00105$
                                    752 ;	main.c:83: set_SCL_low;
                                    753 ;	assignBit
      000099 C2 96            [12]  754 	clr	_P1_6
                                    755 ;	main.c:84: set_SDA_high;
                                    756 ;	assignBit
      00009B D2 97            [12]  757 	setb	_P1_7
                                    758 ;	main.c:85: delay(50);
      00009D 90 00 32         [24]  759 	mov	dptr,#0x0032
      0000A0 12r00r1E         [24]  760 	lcall	_delay
                                    761 ;	main.c:86: set_SCL_high;
                                    762 ;	assignBit
      0000A3 D2 96            [12]  763 	setb	_P1_6
                                    764 ;	main.c:87: delay(50);
      0000A5 90 00 32         [24]  765 	mov	dptr,#0x0032
      0000A8 12r00r1E         [24]  766 	lcall	_delay
                                    767 ;	main.c:89: return SDA;
      0000AB A2 97            [12]  768 	mov	c,_P1_7
      0000AD E4               [12]  769 	clr	a
      0000AE 33               [12]  770 	rlc	a
      0000AF F5 82            [12]  771 	mov	dpl,a
                                    772 ;	main.c:90: }
      0000B1 22               [24]  773 	ret
                                    774 ;------------------------------------------------------------
                                    775 ;Allocation info for local variables in function 'I2C_Read_Byte'
                                    776 ;------------------------------------------------------------
                                    777 ;i                         Allocated to registers r6 
                                    778 ;d                         Allocated to registers r5 
                                    779 ;RxData                    Allocated to registers r7 
                                    780 ;------------------------------------------------------------
                                    781 ;	main.c:93: unsigned char I2C_Read_Byte(void)
                                    782 ;	-----------------------------------------
                                    783 ;	 function I2C_Read_Byte
                                    784 ;	-----------------------------------------
      0000B2                        785 _I2C_Read_Byte:
                                    786 ;	main.c:95: unsigned char i, d, RxData = 0;
      0000B2 7F 00            [12]  787 	mov	r7,#0x00
                                    788 ;	main.c:97: for(i=0;i<8;i++)
      0000B4 7E 00            [12]  789 	mov	r6,#0x00
      0000B6                        790 00102$:
                                    791 ;	main.c:99: set_SCL_low;					// Make SCL pin low
                                    792 ;	assignBit
      0000B6 C2 96            [12]  793 	clr	_P1_6
                                    794 ;	main.c:100: set_SDA_high;					// Don't drive SDA
                                    795 ;	assignBit
      0000B8 D2 97            [12]  796 	setb	_P1_7
                                    797 ;	main.c:101: delay(50);		// Half bit delay
      0000BA 90 00 32         [24]  798 	mov	dptr,#0x0032
      0000BD C0 07            [24]  799 	push	ar7
      0000BF C0 06            [24]  800 	push	ar6
      0000C1 12r00r1E         [24]  801 	lcall	_delay
                                    802 ;	main.c:102: set_SCL_high;					// Make SCL pin high
                                    803 ;	assignBit
      0000C4 D2 96            [12]  804 	setb	_P1_6
                                    805 ;	main.c:103: delay(50);		// 1/4 bit delay
      0000C6 90 00 32         [24]  806 	mov	dptr,#0x0032
      0000C9 12r00r1E         [24]  807 	lcall	_delay
      0000CC D0 06            [24]  808 	pop	ar6
      0000CE D0 07            [24]  809 	pop	ar7
                                    810 ;	main.c:104: d = SDA;					    // Capture Received Bit
      0000D0 A2 97            [12]  811 	mov	c,_P1_7
      0000D2 E4               [12]  812 	clr	a
      0000D3 33               [12]  813 	rlc	a
      0000D4 FD               [12]  814 	mov	r5,a
                                    815 ;	main.c:105: RxData = RxData|(d<<(7-i));   	// Copy it in RxData
      0000D5 8E 04            [24]  816 	mov	ar4,r6
      0000D7 74 07            [12]  817 	mov	a,#0x07
      0000D9 C3               [12]  818 	clr	c
      0000DA 9C               [12]  819 	subb	a,r4
      0000DB FC               [12]  820 	mov	r4,a
      0000DC 8C F0            [24]  821 	mov	b,r4
      0000DE 05 F0            [12]  822 	inc	b
      0000E0 ED               [12]  823 	mov	a,r5
      0000E1 80 02            [24]  824 	sjmp	00117$
      0000E3                        825 00115$:
      0000E3 25 E0            [12]  826 	add	a,acc
      0000E5                        827 00117$:
      0000E5 D5 F0 FB         [24]  828 	djnz	b,00115$
      0000E8 42 07            [12]  829 	orl	ar7,a
                                    830 ;	main.c:106: delay(50);		// 1/4 bit delay
      0000EA 90 00 32         [24]  831 	mov	dptr,#0x0032
      0000ED C0 07            [24]  832 	push	ar7
      0000EF C0 06            [24]  833 	push	ar6
      0000F1 12r00r1E         [24]  834 	lcall	_delay
      0000F4 D0 06            [24]  835 	pop	ar6
      0000F6 D0 07            [24]  836 	pop	ar7
                                    837 ;	main.c:97: for(i=0;i<8;i++)
      0000F8 0E               [12]  838 	inc	r6
      0000F9 BE 08 00         [24]  839 	cjne	r6,#0x08,00118$
      0000FC                        840 00118$:
      0000FC 40 B8            [24]  841 	jc	00102$
                                    842 ;	main.c:109: return RxData;						// Return received byte
      0000FE 8F 82            [24]  843 	mov	dpl,r7
                                    844 ;	main.c:110: }
      000100 22               [24]  845 	ret
                                    846 ;------------------------------------------------------------
                                    847 ;Allocation info for local variables in function 'I2C_Send_ACK'
                                    848 ;------------------------------------------------------------
                                    849 ;	main.c:113: void I2C_Send_ACK(void)
                                    850 ;	-----------------------------------------
                                    851 ;	 function I2C_Send_ACK
                                    852 ;	-----------------------------------------
      000101                        853 _I2C_Send_ACK:
                                    854 ;	main.c:115: set_SCL_low;				// Make SCL pin low
                                    855 ;	assignBit
      000101 C2 96            [12]  856 	clr	_P1_6
                                    857 ;	main.c:116: delay(50);	// Data pin should change it's value,
      000103 90 00 32         [24]  858 	mov	dptr,#0x0032
      000106 12r00r1E         [24]  859 	lcall	_delay
                                    860 ;	main.c:118: set_SDA_high;				// Make SDA Low
                                    861 ;	assignBit
      000109 D2 97            [12]  862 	setb	_P1_7
                                    863 ;	main.c:119: delay(50);	// 1/4 bit delay
      00010B 90 00 32         [24]  864 	mov	dptr,#0x0032
      00010E 12r00r1E         [24]  865 	lcall	_delay
                                    866 ;	main.c:120: set_SCL_high;				// Make SCL pin high
                                    867 ;	assignBit
      000111 D2 96            [12]  868 	setb	_P1_6
                                    869 ;	main.c:121: delay(50);	// Half bit delay
      000113 90 00 32         [24]  870 	mov	dptr,#0x0032
                                    871 ;	main.c:122: }
      000116 02r00r1E         [24]  872 	ljmp	_delay
                                    873 ;------------------------------------------------------------
                                    874 ;Allocation info for local variables in function 'I2C_ReStart'
                                    875 ;------------------------------------------------------------
                                    876 ;	main.c:125: void I2C_ReStart(void)
                                    877 ;	-----------------------------------------
                                    878 ;	 function I2C_ReStart
                                    879 ;	-----------------------------------------
      000119                        880 _I2C_ReStart:
                                    881 ;	main.c:127: set_SCL_low;				// Make SCL pin low
                                    882 ;	assignBit
      000119 C2 96            [12]  883 	clr	_P1_6
                                    884 ;	main.c:129: delay(50);	// Data pin should change it's value,
      00011B 90 00 32         [24]  885 	mov	dptr,#0x0032
      00011E 12r00r1E         [24]  886 	lcall	_delay
                                    887 ;	main.c:131: set_SDA_high;				// Make SDA pin High
                                    888 ;	assignBit
      000121 D2 97            [12]  889 	setb	_P1_7
                                    890 ;	main.c:133: delay(50);	// 1/4 bit delay
      000123 90 00 32         [24]  891 	mov	dptr,#0x0032
      000126 12r00r1E         [24]  892 	lcall	_delay
                                    893 ;	main.c:134: set_SCL_high;				// Make SCL pin high
                                    894 ;	assignBit
      000129 D2 96            [12]  895 	setb	_P1_6
                                    896 ;	main.c:135: delay(50);	// 1/4 bit delay
      00012B 90 00 32         [24]  897 	mov	dptr,#0x0032
      00012E 12r00r1E         [24]  898 	lcall	_delay
                                    899 ;	main.c:136: set_SDA_low;				// Make SDA Low
                                    900 ;	assignBit
      000131 C2 97            [12]  901 	clr	_P1_7
                                    902 ;	main.c:137: delay(50);	// 1/4 bit delay
      000133 90 00 32         [24]  903 	mov	dptr,#0x0032
                                    904 ;	main.c:138: }
      000136 02r00r1E         [24]  905 	ljmp	_delay
                                    906 ;------------------------------------------------------------
                                    907 ;Allocation info for local variables in function 'I2C_Stop'
                                    908 ;------------------------------------------------------------
                                    909 ;	main.c:142: void I2C_Stop(void)
                                    910 ;	-----------------------------------------
                                    911 ;	 function I2C_Stop
                                    912 ;	-----------------------------------------
      000139                        913 _I2C_Stop:
                                    914 ;	main.c:144: set_SCL_low;				// Make SCL pin low
                                    915 ;	assignBit
      000139 C2 96            [12]  916 	clr	_P1_6
                                    917 ;	main.c:146: delay(50);	// Data pin should change it's value,
      00013B 90 00 32         [24]  918 	mov	dptr,#0x0032
      00013E 12r00r1E         [24]  919 	lcall	_delay
                                    920 ;	main.c:148: set_SDA_low;				// Make SDA pin low
                                    921 ;	assignBit
      000141 C2 97            [12]  922 	clr	_P1_7
                                    923 ;	main.c:150: delay(50);	// 1/4 bit delay
      000143 90 00 32         [24]  924 	mov	dptr,#0x0032
      000146 12r00r1E         [24]  925 	lcall	_delay
                                    926 ;	main.c:151: set_SCL_high;				// Make SCL pin high
                                    927 ;	assignBit
      000149 D2 96            [12]  928 	setb	_P1_6
                                    929 ;	main.c:152: delay(50);	// 1/4 bit delay
      00014B 90 00 32         [24]  930 	mov	dptr,#0x0032
      00014E 12r00r1E         [24]  931 	lcall	_delay
                                    932 ;	main.c:153: set_SDA_high;				// Make SDA high
                                    933 ;	assignBit
      000151 D2 97            [12]  934 	setb	_P1_7
                                    935 ;	main.c:154: delay(50);	// 1/4 bit delay
      000153 90 00 32         [24]  936 	mov	dptr,#0x0032
                                    937 ;	main.c:155: }
      000156 02r00r1E         [24]  938 	ljmp	_delay
                                    939 ;------------------------------------------------------------
                                    940 ;Allocation info for local variables in function 'RepeatedStartI2c'
                                    941 ;------------------------------------------------------------
                                    942 ;	main.c:157: void RepeatedStartI2c()
                                    943 ;	-----------------------------------------
                                    944 ;	 function RepeatedStartI2c
                                    945 ;	-----------------------------------------
      000159                        946 _RepeatedStartI2c:
                                    947 ;	main.c:159: SCL  = 0;
                                    948 ;	assignBit
      000159 C2 96            [12]  949 	clr	_P1_6
                                    950 ;	main.c:160: delay(50);
      00015B 90 00 32         [24]  951 	mov	dptr,#0x0032
      00015E 12r00r1E         [24]  952 	lcall	_delay
                                    953 ;	main.c:161: SDA  = 1;
                                    954 ;	assignBit
      000161 D2 97            [12]  955 	setb	_P1_7
                                    956 ;	main.c:162: delay(50);
      000163 90 00 32         [24]  957 	mov	dptr,#0x0032
      000166 12r00r1E         [24]  958 	lcall	_delay
                                    959 ;	main.c:163: SCL  = 1;
                                    960 ;	assignBit
      000169 D2 96            [12]  961 	setb	_P1_6
                                    962 ;	main.c:164: delay(50);
      00016B 90 00 32         [24]  963 	mov	dptr,#0x0032
      00016E 12r00r1E         [24]  964 	lcall	_delay
                                    965 ;	main.c:165: SDA  = 0;
                                    966 ;	assignBit
      000171 C2 97            [12]  967 	clr	_P1_7
                                    968 ;	main.c:166: delay(50);
      000173 90 00 32         [24]  969 	mov	dptr,#0x0032
                                    970 ;	main.c:167: }
      000176 02r00r1E         [24]  971 	ljmp	_delay
                                    972 ;------------------------------------------------------------
                                    973 ;Allocation info for local variables in function 'eebytew'
                                    974 ;------------------------------------------------------------
                                    975 ;databyte                  Allocated with name '_eebytew_PARM_2'
                                    976 ;addr                      Allocated to registers r6 r7 
                                    977 ;------------------------------------------------------------
                                    978 ;	main.c:169: void eebytew(unsigned int addr, unsigned char databyte)
                                    979 ;	-----------------------------------------
                                    980 ;	 function eebytew
                                    981 ;	-----------------------------------------
      000179                        982 _eebytew:
      000179 AE 82            [24]  983 	mov	r6,dpl
      00017B AF 83            [24]  984 	mov	r7,dph
                                    985 ;	main.c:171: I2C_Start();
      00017D C0 07            [24]  986 	push	ar7
      00017F C0 06            [24]  987 	push	ar6
      000181 12r00r3A         [24]  988 	lcall	_I2C_Start
                                    989 ;	main.c:172: I2C_Write_Byte((unsigned char)0xA0);
      000184 75 82 A0         [24]  990 	mov	dpl,#0xa0
      000187 12r00r4C         [24]  991 	lcall	_I2C_Write_Byte
      00018A D0 06            [24]  992 	pop	ar6
      00018C D0 07            [24]  993 	pop	ar7
                                    994 ;	main.c:173: I2C_Write_Byte((unsigned char)addr);
      00018E 8E 82            [24]  995 	mov	dpl,r6
      000190 12r00r4C         [24]  996 	lcall	_I2C_Write_Byte
                                    997 ;	main.c:174: I2C_Write_Byte(databyte);
      000193 85*00 82         [24]  998 	mov	dpl,_eebytew_PARM_2
      000196 12r00r4C         [24]  999 	lcall	_I2C_Write_Byte
                                   1000 ;	main.c:175: I2C_Stop();
                                   1001 ;	main.c:177: }
      000199 02r01r39         [24] 1002 	ljmp	_I2C_Stop
                                   1003 ;------------------------------------------------------------
                                   1004 ;Allocation info for local variables in function 'eebyter'
                                   1005 ;------------------------------------------------------------
                                   1006 ;addr                      Allocated to registers r6 r7 
                                   1007 ;rec                       Allocated to registers r7 
                                   1008 ;------------------------------------------------------------
                                   1009 ;	main.c:179: unsigned char eebyter(unsigned int addr)
                                   1010 ;	-----------------------------------------
                                   1011 ;	 function eebyter
                                   1012 ;	-----------------------------------------
      00019C                       1013 _eebyter:
      00019C AE 82            [24] 1014 	mov	r6,dpl
      00019E AF 83            [24] 1015 	mov	r7,dph
                                   1016 ;	main.c:182: I2C_Start();
      0001A0 C0 07            [24] 1017 	push	ar7
      0001A2 C0 06            [24] 1018 	push	ar6
      0001A4 12r00r3A         [24] 1019 	lcall	_I2C_Start
                                   1020 ;	main.c:183: I2C_Write_Byte((unsigned char)0xA0);
      0001A7 75 82 A0         [24] 1021 	mov	dpl,#0xa0
      0001AA 12r00r4C         [24] 1022 	lcall	_I2C_Write_Byte
      0001AD D0 06            [24] 1023 	pop	ar6
      0001AF D0 07            [24] 1024 	pop	ar7
                                   1025 ;	main.c:184: I2C_Write_Byte((unsigned char)addr);
      0001B1 8E 82            [24] 1026 	mov	dpl,r6
      0001B3 12r00r4C         [24] 1027 	lcall	_I2C_Write_Byte
                                   1028 ;	main.c:185: RepeatedStartI2c();
      0001B6 12r01r59         [24] 1029 	lcall	_RepeatedStartI2c
                                   1030 ;	main.c:186: I2C_Write_Byte((unsigned char)0xA1);
      0001B9 75 82 A1         [24] 1031 	mov	dpl,#0xa1
      0001BC 12r00r4C         [24] 1032 	lcall	_I2C_Write_Byte
                                   1033 ;	main.c:187: rec=I2C_Read_Byte();
      0001BF 12r00rB2         [24] 1034 	lcall	_I2C_Read_Byte
      0001C2 AF 82            [24] 1035 	mov	r7,dpl
                                   1036 ;	main.c:188: I2C_Send_ACK();
      0001C4 C0 07            [24] 1037 	push	ar7
      0001C6 12r01r01         [24] 1038 	lcall	_I2C_Send_ACK
                                   1039 ;	main.c:189: I2C_Stop();
      0001C9 12r01r39         [24] 1040 	lcall	_I2C_Stop
      0001CC D0 07            [24] 1041 	pop	ar7
                                   1042 ;	main.c:190: return rec;
      0001CE 8F 82            [24] 1043 	mov	dpl,r7
                                   1044 ;	main.c:191: }
      0001D0 22               [24] 1045 	ret
                                   1046 ;------------------------------------------------------------
                                   1047 ;Allocation info for local variables in function 'main'
                                   1048 ;------------------------------------------------------------
                                   1049 ;rx                        Allocated to registers 
                                   1050 ;addr                      Allocated with name '_main_addr_131072_47'
                                   1051 ;start_addr                Allocated with name '_main_start_addr_131072_47'
                                   1052 ;end_addr                  Allocated with name '_main_end_addr_131072_47'
                                   1053 ;data                      Allocated with name '_main_data_131072_47'
                                   1054 ;digit                     Allocated to registers r1 r2 
                                   1055 ;ch                        Allocated to registers r4 
                                   1056 ;rd                        Allocated to registers r5 
                                   1057 ;i                         Allocated to registers r0 r1 
                                   1058 ;------------------------------------------------------------
                                   1059 ;	main.c:193: void main(void)
                                   1060 ;	-----------------------------------------
                                   1061 ;	 function main
                                   1062 ;	-----------------------------------------
      0001D1                       1063 _main:
                                   1064 ;	main.c:196: I2C_init();					// Initialize i2c pins
      0001D1 12r00r35         [24] 1065 	lcall	_I2C_init
                                   1066 ;	main.c:197: printf("Starting I2C application\r\n");
      0001D4 74r00            [12] 1067 	mov	a,#___str_0
      0001D6 C0 E0            [24] 1068 	push	acc
      0001D8 74s00            [12] 1069 	mov	a,#(___str_0 >> 8)
      0001DA C0 E0            [24] 1070 	push	acc
      0001DC 74 80            [12] 1071 	mov	a,#0x80
      0001DE C0 E0            [24] 1072 	push	acc
      0001E0 12r00r00         [24] 1073 	lcall	_printf
      0001E3 15 81            [12] 1074 	dec	sp
      0001E5 15 81            [12] 1075 	dec	sp
      0001E7 15 81            [12] 1076 	dec	sp
                                   1077 ;	main.c:198: printf("Help menu:\r\n");
      0001E9 74r1B            [12] 1078 	mov	a,#___str_1
      0001EB C0 E0            [24] 1079 	push	acc
      0001ED 74s00            [12] 1080 	mov	a,#(___str_1 >> 8)
      0001EF C0 E0            [24] 1081 	push	acc
      0001F1 74 80            [12] 1082 	mov	a,#0x80
      0001F3 C0 E0            [24] 1083 	push	acc
      0001F5 12r00r00         [24] 1084 	lcall	_printf
      0001F8 15 81            [12] 1085 	dec	sp
      0001FA 15 81            [12] 1086 	dec	sp
      0001FC 15 81            [12] 1087 	dec	sp
                                   1088 ;	main.c:199: printf("'w': Enter an EEPROM address in hex to write data at and byte data\r\n");
      0001FE 74r28            [12] 1089 	mov	a,#___str_2
      000200 C0 E0            [24] 1090 	push	acc
      000202 74s00            [12] 1091 	mov	a,#(___str_2 >> 8)
      000204 C0 E0            [24] 1092 	push	acc
      000206 74 80            [12] 1093 	mov	a,#0x80
      000208 C0 E0            [24] 1094 	push	acc
      00020A 12r00r00         [24] 1095 	lcall	_printf
      00020D 15 81            [12] 1096 	dec	sp
      00020F 15 81            [12] 1097 	dec	sp
      000211 15 81            [12] 1098 	dec	sp
                                   1099 ;	main.c:200: printf("'r': Enter an EEPROM address in hex to read data from\r\n");
      000213 74r6D            [12] 1100 	mov	a,#___str_3
      000215 C0 E0            [24] 1101 	push	acc
      000217 74s00            [12] 1102 	mov	a,#(___str_3 >> 8)
      000219 C0 E0            [24] 1103 	push	acc
      00021B 74 80            [12] 1104 	mov	a,#0x80
      00021D C0 E0            [24] 1105 	push	acc
      00021F 12r00r00         [24] 1106 	lcall	_printf
      000222 15 81            [12] 1107 	dec	sp
      000224 15 81            [12] 1108 	dec	sp
      000226 15 81            [12] 1109 	dec	sp
                                   1110 ;	main.c:201: printf("'h': Enter an EEPROM start and end addresses to dump the data\r\n");
      000228 74rA5            [12] 1111 	mov	a,#___str_4
      00022A C0 E0            [24] 1112 	push	acc
      00022C 74s00            [12] 1113 	mov	a,#(___str_4 >> 8)
      00022E C0 E0            [24] 1114 	push	acc
      000230 74 80            [12] 1115 	mov	a,#0x80
      000232 C0 E0            [24] 1116 	push	acc
      000234 12r00r00         [24] 1117 	lcall	_printf
      000237 15 81            [12] 1118 	dec	sp
      000239 15 81            [12] 1119 	dec	sp
      00023B 15 81            [12] 1120 	dec	sp
                                   1121 ;	main.c:202: printf("'e': Reset EEPROM\r\n");
      00023D 74rE5            [12] 1122 	mov	a,#___str_5
      00023F C0 E0            [24] 1123 	push	acc
      000241 74s00            [12] 1124 	mov	a,#(___str_5 >> 8)
      000243 C0 E0            [24] 1125 	push	acc
      000245 74 80            [12] 1126 	mov	a,#0x80
      000247 C0 E0            [24] 1127 	push	acc
      000249 12r00r00         [24] 1128 	lcall	_printf
      00024C 15 81            [12] 1129 	dec	sp
      00024E 15 81            [12] 1130 	dec	sp
      000250 15 81            [12] 1131 	dec	sp
                                   1132 ;	main.c:204: while(1)
      000252 E4               [12] 1133 	clr	a
      000253 FE               [12] 1134 	mov	r6,a
      000254 FF               [12] 1135 	mov	r7,a
      000255 F5*03            [12] 1136 	mov	_main_start_addr_131072_47,a
      000257 F5*04            [12] 1137 	mov	(_main_start_addr_131072_47 + 1),a
      000259                       1138 00212$:
                                   1139 ;	main.c:206: unsigned int addr, start_addr, end_addr = 0;
      000259 E4               [12] 1140 	clr	a
      00025A F5*05            [12] 1141 	mov	_main_end_addr_131072_47,a
      00025C F5*06            [12] 1142 	mov	(_main_end_addr_131072_47 + 1),a
                                   1143 ;	main.c:207: unsigned int data = 0;
      00025E F5*07            [12] 1144 	mov	_main_data_131072_47,a
      000260 F5*08            [12] 1145 	mov	(_main_data_131072_47 + 1),a
                                   1146 ;	main.c:209: char ch = getchar();
      000262 C0 07            [24] 1147 	push	ar7
      000264 C0 06            [24] 1148 	push	ar6
      000266 12r00r00         [24] 1149 	lcall	_getchar
      000269 A8 82            [24] 1150 	mov	r0,dpl
                                   1151 ;	main.c:210: putchar(ch);
      00026B 88 01            [24] 1152 	mov	ar1,r0
      00026D 7B 00            [12] 1153 	mov	r3,#0x00
      00026F 89 82            [24] 1154 	mov	dpl,r1
      000271 8B 83            [24] 1155 	mov	dph,r3
      000273 C0 00            [24] 1156 	push	ar0
      000275 12r00r0E         [24] 1157 	lcall	_putchar
                                   1158 ;	main.c:211: printf("\r\n");
      000278 74rF9            [12] 1159 	mov	a,#___str_6
      00027A C0 E0            [24] 1160 	push	acc
      00027C 74s00            [12] 1161 	mov	a,#(___str_6 >> 8)
      00027E C0 E0            [24] 1162 	push	acc
      000280 74 80            [12] 1163 	mov	a,#0x80
      000282 C0 E0            [24] 1164 	push	acc
      000284 12r00r00         [24] 1165 	lcall	_printf
      000287 15 81            [12] 1166 	dec	sp
      000289 15 81            [12] 1167 	dec	sp
      00028B 15 81            [12] 1168 	dec	sp
      00028D D0 00            [24] 1169 	pop	ar0
      00028F D0 06            [24] 1170 	pop	ar6
      000291 D0 07            [24] 1171 	pop	ar7
                                   1172 ;	main.c:212: switch(ch)
      000293 B8 68 03         [24] 1173 	cjne	r0,#0x68,00485$
      000296 02r05rAC         [24] 1174 	ljmp	00163$
      000299                       1175 00485$:
      000299 B8 72 03         [24] 1176 	cjne	r0,#0x72,00486$
      00029C 02r04r9C         [24] 1177 	ljmp	00142$
      00029F                       1178 00486$:
      00029F B8 77 02         [24] 1179 	cjne	r0,#0x77,00487$
      0002A2 80 03            [24] 1180 	sjmp	00488$
      0002A4                       1181 00487$:
      0002A4 02r08r6F         [24] 1182 	ljmp	00209$
      0002A7                       1183 00488$:
                                   1184 ;	main.c:215: printf("Enter the address location to store the data at : \r\n");
      0002A7 C0 07            [24] 1185 	push	ar7
      0002A9 C0 06            [24] 1186 	push	ar6
      0002AB 74rFC            [12] 1187 	mov	a,#___str_7
      0002AD C0 E0            [24] 1188 	push	acc
      0002AF 74s00            [12] 1189 	mov	a,#(___str_7 >> 8)
      0002B1 C0 E0            [24] 1190 	push	acc
      0002B3 74 80            [12] 1191 	mov	a,#0x80
      0002B5 C0 E0            [24] 1192 	push	acc
      0002B7 12r00r00         [24] 1193 	lcall	_printf
      0002BA 15 81            [12] 1194 	dec	sp
      0002BC 15 81            [12] 1195 	dec	sp
      0002BE 15 81            [12] 1196 	dec	sp
      0002C0 D0 06            [24] 1197 	pop	ar6
      0002C2 D0 07            [24] 1198 	pop	ar7
                                   1199 ;	main.c:216: while (1) {
      0002C4                       1200 00117$:
                                   1201 ;	main.c:217: ch = getchar();
      0002C4 C0 07            [24] 1202 	push	ar7
      0002C6 C0 06            [24] 1203 	push	ar6
      0002C8 12r00r00         [24] 1204 	lcall	_getchar
      0002CB AA 82            [24] 1205 	mov	r2,dpl
      0002CD D0 06            [24] 1206 	pop	ar6
      0002CF D0 07            [24] 1207 	pop	ar7
                                   1208 ;	main.c:219: if ((int)ch == 13) { // Check until carriage return
      0002D1 8A 01            [24] 1209 	mov	ar1,r2
      0002D3 7B 00            [12] 1210 	mov	r3,#0x00
      0002D5 B9 0D 05         [24] 1211 	cjne	r1,#0x0d,00489$
      0002D8 BB 00 02         [24] 1212 	cjne	r3,#0x00,00489$
      0002DB 80 71            [24] 1213 	sjmp	00118$
      0002DD                       1214 00489$:
                                   1215 ;	main.c:223: if ((ch >= '0') && (ch <= '9')) {
      0002DD BA 30 00         [24] 1216 	cjne	r2,#0x30,00490$
      0002E0                       1217 00490$:
      0002E0 40 0F            [24] 1218 	jc	00113$
      0002E2 EA               [12] 1219 	mov	a,r2
      0002E3 24 C6            [12] 1220 	add	a,#0xff - 0x39
      0002E5 40 0A            [24] 1221 	jc	00113$
                                   1222 ;	main.c:224: digit = ch - '0';
      0002E7 E9               [12] 1223 	mov	a,r1
      0002E8 24 D0            [12] 1224 	add	a,#0xd0
      0002EA F9               [12] 1225 	mov	r1,a
      0002EB EB               [12] 1226 	mov	a,r3
      0002EC 34 FF            [12] 1227 	addc	a,#0xff
      0002EE FB               [12] 1228 	mov	r3,a
      0002EF 80 44            [24] 1229 	sjmp	00114$
      0002F1                       1230 00113$:
                                   1231 ;	main.c:225: } else if ((ch >= 'A') && (ch <= 'F')) {
      0002F1 BA 41 00         [24] 1232 	cjne	r2,#0x41,00493$
      0002F4                       1233 00493$:
      0002F4 40 13            [24] 1234 	jc	00109$
      0002F6 EA               [12] 1235 	mov	a,r2
      0002F7 24 B9            [12] 1236 	add	a,#0xff - 0x46
      0002F9 40 0E            [24] 1237 	jc	00109$
                                   1238 ;	main.c:226: digit = ch - 7 - '0';
      0002FB 8A 00            [24] 1239 	mov	ar0,r2
      0002FD 7D 00            [12] 1240 	mov	r5,#0x00
      0002FF E8               [12] 1241 	mov	a,r0
      000300 24 C9            [12] 1242 	add	a,#0xc9
      000302 F9               [12] 1243 	mov	r1,a
      000303 ED               [12] 1244 	mov	a,r5
      000304 34 FF            [12] 1245 	addc	a,#0xff
      000306 FB               [12] 1246 	mov	r3,a
      000307 80 2C            [24] 1247 	sjmp	00114$
      000309                       1248 00109$:
                                   1249 ;	main.c:227: } else if ((ch >= 'a') && (ch <= 'f')) {
      000309 BA 61 00         [24] 1250 	cjne	r2,#0x61,00496$
      00030C                       1251 00496$:
      00030C 40 11            [24] 1252 	jc	00105$
      00030E EA               [12] 1253 	mov	a,r2
      00030F 24 99            [12] 1254 	add	a,#0xff - 0x66
      000311 40 0C            [24] 1255 	jc	00105$
                                   1256 ;	main.c:228: digit = ch - 32 - 7 - '0';
      000313 7D 00            [12] 1257 	mov	r5,#0x00
      000315 EA               [12] 1258 	mov	a,r2
      000316 24 A9            [12] 1259 	add	a,#0xa9
      000318 F9               [12] 1260 	mov	r1,a
      000319 ED               [12] 1261 	mov	a,r5
      00031A 34 FF            [12] 1262 	addc	a,#0xff
      00031C FB               [12] 1263 	mov	r3,a
      00031D 80 16            [24] 1264 	sjmp	00114$
      00031F                       1265 00105$:
                                   1266 ;	main.c:230: printf("Invalid input. Please enter 0-9, A-F or a-f only.\r\n");
      00031F 74r31            [12] 1267 	mov	a,#___str_8
      000321 C0 E0            [24] 1268 	push	acc
      000323 74s01            [12] 1269 	mov	a,#(___str_8 >> 8)
      000325 C0 E0            [24] 1270 	push	acc
      000327 74 80            [12] 1271 	mov	a,#0x80
      000329 C0 E0            [24] 1272 	push	acc
      00032B 12r00r00         [24] 1273 	lcall	_printf
      00032E 15 81            [12] 1274 	dec	sp
      000330 15 81            [12] 1275 	dec	sp
      000332 15 81            [12] 1276 	dec	sp
                                   1277 ;	main.c:231: return;
      000334 22               [24] 1278 	ret
      000335                       1279 00114$:
                                   1280 ;	main.c:233: addr = addr * 16 + digit;
      000335 8E 04            [24] 1281 	mov	ar4,r6
      000337 EF               [12] 1282 	mov	a,r7
      000338 C4               [12] 1283 	swap	a
      000339 54 F0            [12] 1284 	anl	a,#0xf0
      00033B CC               [12] 1285 	xch	a,r4
      00033C C4               [12] 1286 	swap	a
      00033D CC               [12] 1287 	xch	a,r4
      00033E 6C               [12] 1288 	xrl	a,r4
      00033F CC               [12] 1289 	xch	a,r4
      000340 54 F0            [12] 1290 	anl	a,#0xf0
      000342 CC               [12] 1291 	xch	a,r4
      000343 6C               [12] 1292 	xrl	a,r4
      000344 FD               [12] 1293 	mov	r5,a
      000345 E9               [12] 1294 	mov	a,r1
      000346 2C               [12] 1295 	add	a,r4
      000347 FE               [12] 1296 	mov	r6,a
      000348 EB               [12] 1297 	mov	a,r3
      000349 3D               [12] 1298 	addc	a,r5
      00034A FF               [12] 1299 	mov	r7,a
      00034B 02r02rC4         [24] 1300 	ljmp	00117$
      00034E                       1301 00118$:
                                   1302 ;	main.c:237: printf("Entered address: 0x%x\r\n", addr);
      00034E C0 07            [24] 1303 	push	ar7
      000350 C0 06            [24] 1304 	push	ar6
      000352 C0 06            [24] 1305 	push	ar6
      000354 C0 07            [24] 1306 	push	ar7
      000356 74r65            [12] 1307 	mov	a,#___str_9
      000358 C0 E0            [24] 1308 	push	acc
      00035A 74s01            [12] 1309 	mov	a,#(___str_9 >> 8)
      00035C C0 E0            [24] 1310 	push	acc
      00035E 74 80            [12] 1311 	mov	a,#0x80
      000360 C0 E0            [24] 1312 	push	acc
      000362 12r00r00         [24] 1313 	lcall	_printf
      000365 E5 81            [12] 1314 	mov	a,sp
      000367 24 FB            [12] 1315 	add	a,#0xfb
      000369 F5 81            [12] 1316 	mov	sp,a
      00036B D0 06            [24] 1317 	pop	ar6
      00036D D0 07            [24] 1318 	pop	ar7
                                   1319 ;	main.c:240: if ((addr < 0x0) || (addr > 0x7FF)) {
      00036F C3               [12] 1320 	clr	c
      000370 74 FF            [12] 1321 	mov	a,#0xff
      000372 9E               [12] 1322 	subb	a,r6
      000373 74 07            [12] 1323 	mov	a,#0x07
      000375 9F               [12] 1324 	subb	a,r7
      000376 50 20            [24] 1325 	jnc	00120$
                                   1326 ;	main.c:241: printf("Invalid buffer address. The address should be between 0 and 7FF.\r\n");
      000378 C0 07            [24] 1327 	push	ar7
      00037A C0 06            [24] 1328 	push	ar6
      00037C 74r7D            [12] 1329 	mov	a,#___str_10
      00037E C0 E0            [24] 1330 	push	acc
      000380 74s01            [12] 1331 	mov	a,#(___str_10 >> 8)
      000382 C0 E0            [24] 1332 	push	acc
      000384 74 80            [12] 1333 	mov	a,#0x80
      000386 C0 E0            [24] 1334 	push	acc
      000388 12r00r00         [24] 1335 	lcall	_printf
      00038B 15 81            [12] 1336 	dec	sp
      00038D 15 81            [12] 1337 	dec	sp
      00038F 15 81            [12] 1338 	dec	sp
      000391 D0 06            [24] 1339 	pop	ar6
      000393 D0 07            [24] 1340 	pop	ar7
                                   1341 ;	main.c:242: break;
      000395 02r02r59         [24] 1342 	ljmp	00212$
      000398                       1343 00120$:
                                   1344 ;	main.c:245: printf("Enter the data byte to write:\r\n");
      000398 C0 07            [24] 1345 	push	ar7
      00039A C0 06            [24] 1346 	push	ar6
      00039C 74rC0            [12] 1347 	mov	a,#___str_11
      00039E C0 E0            [24] 1348 	push	acc
      0003A0 74s01            [12] 1349 	mov	a,#(___str_11 >> 8)
      0003A2 C0 E0            [24] 1350 	push	acc
      0003A4 74 80            [12] 1351 	mov	a,#0x80
      0003A6 C0 E0            [24] 1352 	push	acc
      0003A8 12r00r00         [24] 1353 	lcall	_printf
      0003AB 15 81            [12] 1354 	dec	sp
      0003AD 15 81            [12] 1355 	dec	sp
      0003AF 15 81            [12] 1356 	dec	sp
      0003B1 D0 06            [24] 1357 	pop	ar6
      0003B3 D0 07            [24] 1358 	pop	ar7
                                   1359 ;	main.c:247: while (1) {
      0003B5                       1360 00137$:
                                   1361 ;	main.c:248: ch = getchar();
      0003B5 C0 07            [24] 1362 	push	ar7
      0003B7 C0 06            [24] 1363 	push	ar6
      0003B9 12r00r00         [24] 1364 	lcall	_getchar
      0003BC AC 82            [24] 1365 	mov	r4,dpl
      0003BE D0 06            [24] 1366 	pop	ar6
      0003C0 D0 07            [24] 1367 	pop	ar7
                                   1368 ;	main.c:250: if ((int)ch == 13) { // Check until carriage return
      0003C2 8C 03            [24] 1369 	mov	ar3,r4
      0003C4 7D 00            [12] 1370 	mov	r5,#0x00
      0003C6 BB 0D 05         [24] 1371 	cjne	r3,#0x0d,00500$
      0003C9 BD 00 02         [24] 1372 	cjne	r5,#0x00,00500$
      0003CC 80 6E            [24] 1373 	sjmp	00138$
      0003CE                       1374 00500$:
                                   1375 ;	main.c:254: if ((ch >= '0') && (ch <= '9')) {
      0003CE BC 30 00         [24] 1376 	cjne	r4,#0x30,00501$
      0003D1                       1377 00501$:
      0003D1 40 0F            [24] 1378 	jc	00133$
      0003D3 EC               [12] 1379 	mov	a,r4
      0003D4 24 C6            [12] 1380 	add	a,#0xff - 0x39
      0003D6 40 0A            [24] 1381 	jc	00133$
                                   1382 ;	main.c:255: digit = ch - '0';
      0003D8 EB               [12] 1383 	mov	a,r3
      0003D9 24 D0            [12] 1384 	add	a,#0xd0
      0003DB FA               [12] 1385 	mov	r2,a
      0003DC ED               [12] 1386 	mov	a,r5
      0003DD 34 FF            [12] 1387 	addc	a,#0xff
      0003DF F9               [12] 1388 	mov	r1,a
      0003E0 80 3E            [24] 1389 	sjmp	00134$
      0003E2                       1390 00133$:
                                   1391 ;	main.c:256: } else if ((ch >= 'A') && (ch <= 'F')) {
      0003E2 BC 41 00         [24] 1392 	cjne	r4,#0x41,00504$
      0003E5                       1393 00504$:
      0003E5 40 0F            [24] 1394 	jc	00129$
      0003E7 EC               [12] 1395 	mov	a,r4
      0003E8 24 B9            [12] 1396 	add	a,#0xff - 0x46
      0003EA 40 0A            [24] 1397 	jc	00129$
                                   1398 ;	main.c:257: digit = ch - 7 - '0';
      0003EC EB               [12] 1399 	mov	a,r3
      0003ED 24 C9            [12] 1400 	add	a,#0xc9
      0003EF FA               [12] 1401 	mov	r2,a
      0003F0 ED               [12] 1402 	mov	a,r5
      0003F1 34 FF            [12] 1403 	addc	a,#0xff
      0003F3 F9               [12] 1404 	mov	r1,a
      0003F4 80 2A            [24] 1405 	sjmp	00134$
      0003F6                       1406 00129$:
                                   1407 ;	main.c:258: } else if ((ch >= 'a') && (ch <= 'f')) {
      0003F6 BC 61 00         [24] 1408 	cjne	r4,#0x61,00507$
      0003F9                       1409 00507$:
      0003F9 40 0F            [24] 1410 	jc	00125$
      0003FB EC               [12] 1411 	mov	a,r4
      0003FC 24 99            [12] 1412 	add	a,#0xff - 0x66
      0003FE 40 0A            [24] 1413 	jc	00125$
                                   1414 ;	main.c:259: digit = ch - 32 - 7 - '0';
      000400 EB               [12] 1415 	mov	a,r3
      000401 24 A9            [12] 1416 	add	a,#0xa9
      000403 FA               [12] 1417 	mov	r2,a
      000404 ED               [12] 1418 	mov	a,r5
      000405 34 FF            [12] 1419 	addc	a,#0xff
      000407 F9               [12] 1420 	mov	r1,a
      000408 80 16            [24] 1421 	sjmp	00134$
      00040A                       1422 00125$:
                                   1423 ;	main.c:261: printf("Invalid input. Please enter 0-9, A-F or a-f only.\r\n");
      00040A 74r31            [12] 1424 	mov	a,#___str_8
      00040C C0 E0            [24] 1425 	push	acc
      00040E 74s01            [12] 1426 	mov	a,#(___str_8 >> 8)
      000410 C0 E0            [24] 1427 	push	acc
      000412 74 80            [12] 1428 	mov	a,#0x80
      000414 C0 E0            [24] 1429 	push	acc
      000416 12r00r00         [24] 1430 	lcall	_printf
      000419 15 81            [12] 1431 	dec	sp
      00041B 15 81            [12] 1432 	dec	sp
      00041D 15 81            [12] 1433 	dec	sp
                                   1434 ;	main.c:262: return;
      00041F 22               [24] 1435 	ret
      000420                       1436 00134$:
                                   1437 ;	main.c:264: data = data * 16 + digit;
      000420 AC*07            [24] 1438 	mov	r4,_main_data_131072_47
      000422 E5*08            [12] 1439 	mov	a,(_main_data_131072_47 + 1)
      000424 C4               [12] 1440 	swap	a
      000425 54 F0            [12] 1441 	anl	a,#0xf0
      000427 CC               [12] 1442 	xch	a,r4
      000428 C4               [12] 1443 	swap	a
      000429 CC               [12] 1444 	xch	a,r4
      00042A 6C               [12] 1445 	xrl	a,r4
      00042B CC               [12] 1446 	xch	a,r4
      00042C 54 F0            [12] 1447 	anl	a,#0xf0
      00042E CC               [12] 1448 	xch	a,r4
      00042F 6C               [12] 1449 	xrl	a,r4
      000430 FD               [12] 1450 	mov	r5,a
      000431 EA               [12] 1451 	mov	a,r2
      000432 2C               [12] 1452 	add	a,r4
      000433 F5*07            [12] 1453 	mov	_main_data_131072_47,a
      000435 E9               [12] 1454 	mov	a,r1
      000436 3D               [12] 1455 	addc	a,r5
      000437 F5*08            [12] 1456 	mov	(_main_data_131072_47 + 1),a
      000439 02r03rB5         [24] 1457 	ljmp	00137$
      00043C                       1458 00138$:
                                   1459 ;	main.c:268: printf("Entered data: 0x%x\r\n", data);
      00043C C0 07            [24] 1460 	push	ar7
      00043E C0 06            [24] 1461 	push	ar6
      000440 C0*07            [24] 1462 	push	_main_data_131072_47
      000442 C0*08            [24] 1463 	push	(_main_data_131072_47 + 1)
      000444 74rE0            [12] 1464 	mov	a,#___str_12
      000446 C0 E0            [24] 1465 	push	acc
      000448 74s01            [12] 1466 	mov	a,#(___str_12 >> 8)
      00044A C0 E0            [24] 1467 	push	acc
      00044C 74 80            [12] 1468 	mov	a,#0x80
      00044E C0 E0            [24] 1469 	push	acc
      000450 12r00r00         [24] 1470 	lcall	_printf
      000453 E5 81            [12] 1471 	mov	a,sp
      000455 24 FB            [12] 1472 	add	a,#0xfb
      000457 F5 81            [12] 1473 	mov	sp,a
      000459 D0 06            [24] 1474 	pop	ar6
      00045B D0 07            [24] 1475 	pop	ar7
                                   1476 ;	main.c:271: if ((data < 0x0) || (data > 0xFF)) {
      00045D C3               [12] 1477 	clr	c
      00045E 74 FF            [12] 1478 	mov	a,#0xff
      000460 95*07            [12] 1479 	subb	a,_main_data_131072_47
      000462 E4               [12] 1480 	clr	a
      000463 95*08            [12] 1481 	subb	a,(_main_data_131072_47 + 1)
      000465 50 20            [24] 1482 	jnc	00140$
                                   1483 ;	main.c:272: printf("Invalid buffer data. The data should be between 0 and FF.\r\n");
      000467 C0 07            [24] 1484 	push	ar7
      000469 C0 06            [24] 1485 	push	ar6
      00046B 74rF5            [12] 1486 	mov	a,#___str_13
      00046D C0 E0            [24] 1487 	push	acc
      00046F 74s01            [12] 1488 	mov	a,#(___str_13 >> 8)
      000471 C0 E0            [24] 1489 	push	acc
      000473 74 80            [12] 1490 	mov	a,#0x80
      000475 C0 E0            [24] 1491 	push	acc
      000477 12r00r00         [24] 1492 	lcall	_printf
      00047A 15 81            [12] 1493 	dec	sp
      00047C 15 81            [12] 1494 	dec	sp
      00047E 15 81            [12] 1495 	dec	sp
      000480 D0 06            [24] 1496 	pop	ar6
      000482 D0 07            [24] 1497 	pop	ar7
                                   1498 ;	main.c:273: break;
      000484 02r02r59         [24] 1499 	ljmp	00212$
      000487                       1500 00140$:
                                   1501 ;	main.c:276: eebytew(addr, data);
      000487 85*07*00         [24] 1502 	mov	_eebytew_PARM_2,_main_data_131072_47
      00048A 8E 82            [24] 1503 	mov	dpl,r6
      00048C 8F 83            [24] 1504 	mov	dph,r7
      00048E C0 07            [24] 1505 	push	ar7
      000490 C0 06            [24] 1506 	push	ar6
      000492 12r01r79         [24] 1507 	lcall	_eebytew
      000495 D0 06            [24] 1508 	pop	ar6
      000497 D0 07            [24] 1509 	pop	ar7
                                   1510 ;	main.c:277: break;
      000499 02r02r59         [24] 1511 	ljmp	00212$
                                   1512 ;	main.c:280: case 'r':
      00049C                       1513 00142$:
                                   1514 ;	main.c:281: printf("Enter the address location to read the data from : \r\n");
      00049C C0 07            [24] 1515 	push	ar7
      00049E C0 06            [24] 1516 	push	ar6
      0004A0 74r31            [12] 1517 	mov	a,#___str_14
      0004A2 C0 E0            [24] 1518 	push	acc
      0004A4 74s02            [12] 1519 	mov	a,#(___str_14 >> 8)
      0004A6 C0 E0            [24] 1520 	push	acc
      0004A8 74 80            [12] 1521 	mov	a,#0x80
      0004AA C0 E0            [24] 1522 	push	acc
      0004AC 12r00r00         [24] 1523 	lcall	_printf
      0004AF 15 81            [12] 1524 	dec	sp
      0004B1 15 81            [12] 1525 	dec	sp
      0004B3 15 81            [12] 1526 	dec	sp
      0004B5 D0 06            [24] 1527 	pop	ar6
      0004B7 D0 07            [24] 1528 	pop	ar7
                                   1529 ;	main.c:282: while (1) {
      0004B9                       1530 00158$:
                                   1531 ;	main.c:283: ch = getchar();
      0004B9 C0 07            [24] 1532 	push	ar7
      0004BB C0 06            [24] 1533 	push	ar6
      0004BD 12r00r00         [24] 1534 	lcall	_getchar
      0004C0 AC 82            [24] 1535 	mov	r4,dpl
      0004C2 D0 06            [24] 1536 	pop	ar6
      0004C4 D0 07            [24] 1537 	pop	ar7
                                   1538 ;	main.c:285: if ((int)ch == 13) { // Check until carriage return
      0004C6 8C 03            [24] 1539 	mov	ar3,r4
      0004C8 7D 00            [12] 1540 	mov	r5,#0x00
      0004CA BB 0D 05         [24] 1541 	cjne	r3,#0x0d,00511$
      0004CD BD 00 02         [24] 1542 	cjne	r5,#0x00,00511$
      0004D0 80 6B            [24] 1543 	sjmp	00159$
      0004D2                       1544 00511$:
                                   1545 ;	main.c:289: if ((ch >= '0') && (ch <= '9')) {
      0004D2 BC 30 00         [24] 1546 	cjne	r4,#0x30,00512$
      0004D5                       1547 00512$:
      0004D5 40 0F            [24] 1548 	jc	00154$
      0004D7 EC               [12] 1549 	mov	a,r4
      0004D8 24 C6            [12] 1550 	add	a,#0xff - 0x39
      0004DA 40 0A            [24] 1551 	jc	00154$
                                   1552 ;	main.c:290: digit = ch - '0';
      0004DC EB               [12] 1553 	mov	a,r3
      0004DD 24 D0            [12] 1554 	add	a,#0xd0
      0004DF F9               [12] 1555 	mov	r1,a
      0004E0 ED               [12] 1556 	mov	a,r5
      0004E1 34 FF            [12] 1557 	addc	a,#0xff
      0004E3 FA               [12] 1558 	mov	r2,a
      0004E4 80 3E            [24] 1559 	sjmp	00155$
      0004E6                       1560 00154$:
                                   1561 ;	main.c:291: } else if ((ch >= 'A') && (ch <= 'F')) {
      0004E6 BC 41 00         [24] 1562 	cjne	r4,#0x41,00515$
      0004E9                       1563 00515$:
      0004E9 40 0F            [24] 1564 	jc	00150$
      0004EB EC               [12] 1565 	mov	a,r4
      0004EC 24 B9            [12] 1566 	add	a,#0xff - 0x46
      0004EE 40 0A            [24] 1567 	jc	00150$
                                   1568 ;	main.c:292: digit = ch - 7 - '0';
      0004F0 EB               [12] 1569 	mov	a,r3
      0004F1 24 C9            [12] 1570 	add	a,#0xc9
      0004F3 F9               [12] 1571 	mov	r1,a
      0004F4 ED               [12] 1572 	mov	a,r5
      0004F5 34 FF            [12] 1573 	addc	a,#0xff
      0004F7 FA               [12] 1574 	mov	r2,a
      0004F8 80 2A            [24] 1575 	sjmp	00155$
      0004FA                       1576 00150$:
                                   1577 ;	main.c:293: } else if ((ch >= 'a') && (ch <= 'f')) {
      0004FA BC 61 00         [24] 1578 	cjne	r4,#0x61,00518$
      0004FD                       1579 00518$:
      0004FD 40 0F            [24] 1580 	jc	00146$
      0004FF EC               [12] 1581 	mov	a,r4
      000500 24 99            [12] 1582 	add	a,#0xff - 0x66
      000502 40 0A            [24] 1583 	jc	00146$
                                   1584 ;	main.c:294: digit = ch - 32 - 7 - '0';
      000504 EB               [12] 1585 	mov	a,r3
      000505 24 A9            [12] 1586 	add	a,#0xa9
      000507 F9               [12] 1587 	mov	r1,a
      000508 ED               [12] 1588 	mov	a,r5
      000509 34 FF            [12] 1589 	addc	a,#0xff
      00050B FA               [12] 1590 	mov	r2,a
      00050C 80 16            [24] 1591 	sjmp	00155$
      00050E                       1592 00146$:
                                   1593 ;	main.c:296: printf("Invalid input. Please enter 0-9, A-F or a-f.\r\n");
      00050E 74r67            [12] 1594 	mov	a,#___str_15
      000510 C0 E0            [24] 1595 	push	acc
      000512 74s02            [12] 1596 	mov	a,#(___str_15 >> 8)
      000514 C0 E0            [24] 1597 	push	acc
      000516 74 80            [12] 1598 	mov	a,#0x80
      000518 C0 E0            [24] 1599 	push	acc
      00051A 12r00r00         [24] 1600 	lcall	_printf
      00051D 15 81            [12] 1601 	dec	sp
      00051F 15 81            [12] 1602 	dec	sp
      000521 15 81            [12] 1603 	dec	sp
                                   1604 ;	main.c:297: return;
      000523 22               [24] 1605 	ret
      000524                       1606 00155$:
                                   1607 ;	main.c:299: addr = addr * 16 + digit;
      000524 8E 04            [24] 1608 	mov	ar4,r6
      000526 EF               [12] 1609 	mov	a,r7
      000527 C4               [12] 1610 	swap	a
      000528 54 F0            [12] 1611 	anl	a,#0xf0
      00052A CC               [12] 1612 	xch	a,r4
      00052B C4               [12] 1613 	swap	a
      00052C CC               [12] 1614 	xch	a,r4
      00052D 6C               [12] 1615 	xrl	a,r4
      00052E CC               [12] 1616 	xch	a,r4
      00052F 54 F0            [12] 1617 	anl	a,#0xf0
      000531 CC               [12] 1618 	xch	a,r4
      000532 6C               [12] 1619 	xrl	a,r4
      000533 FD               [12] 1620 	mov	r5,a
      000534 E9               [12] 1621 	mov	a,r1
      000535 2C               [12] 1622 	add	a,r4
      000536 FE               [12] 1623 	mov	r6,a
      000537 EA               [12] 1624 	mov	a,r2
      000538 3D               [12] 1625 	addc	a,r5
      000539 FF               [12] 1626 	mov	r7,a
      00053A 02r04rB9         [24] 1627 	ljmp	00158$
      00053D                       1628 00159$:
                                   1629 ;	main.c:303: printf("Entered address: 0x%x\r\n", addr);
      00053D C0 07            [24] 1630 	push	ar7
      00053F C0 06            [24] 1631 	push	ar6
      000541 C0 06            [24] 1632 	push	ar6
      000543 C0 07            [24] 1633 	push	ar7
      000545 74r65            [12] 1634 	mov	a,#___str_9
      000547 C0 E0            [24] 1635 	push	acc
      000549 74s01            [12] 1636 	mov	a,#(___str_9 >> 8)
      00054B C0 E0            [24] 1637 	push	acc
      00054D 74 80            [12] 1638 	mov	a,#0x80
      00054F C0 E0            [24] 1639 	push	acc
      000551 12r00r00         [24] 1640 	lcall	_printf
      000554 E5 81            [12] 1641 	mov	a,sp
      000556 24 FB            [12] 1642 	add	a,#0xfb
      000558 F5 81            [12] 1643 	mov	sp,a
      00055A D0 06            [24] 1644 	pop	ar6
      00055C D0 07            [24] 1645 	pop	ar7
                                   1646 ;	main.c:306: if ((addr < 0x0) || (addr > 0x7FF)) {
      00055E C3               [12] 1647 	clr	c
      00055F 74 FF            [12] 1648 	mov	a,#0xff
      000561 9E               [12] 1649 	subb	a,r6
      000562 74 07            [12] 1650 	mov	a,#0x07
      000564 9F               [12] 1651 	subb	a,r7
      000565 50 16            [24] 1652 	jnc	00161$
                                   1653 ;	main.c:307: printf("Invalid buffer address. The address should be between 0 and 7FF.\r\n");
      000567 74r7D            [12] 1654 	mov	a,#___str_10
      000569 C0 E0            [24] 1655 	push	acc
      00056B 74s01            [12] 1656 	mov	a,#(___str_10 >> 8)
      00056D C0 E0            [24] 1657 	push	acc
      00056F 74 80            [12] 1658 	mov	a,#0x80
      000571 C0 E0            [24] 1659 	push	acc
      000573 12r00r00         [24] 1660 	lcall	_printf
      000576 15 81            [12] 1661 	dec	sp
      000578 15 81            [12] 1662 	dec	sp
      00057A 15 81            [12] 1663 	dec	sp
                                   1664 ;	main.c:308: return;
      00057C 22               [24] 1665 	ret
      00057D                       1666 00161$:
                                   1667 ;	main.c:310: unsigned char rd = eebyter(addr);
      00057D 8E 82            [24] 1668 	mov	dpl,r6
      00057F 8F 83            [24] 1669 	mov	dph,r7
      000581 C0 07            [24] 1670 	push	ar7
      000583 C0 06            [24] 1671 	push	ar6
      000585 12r01r9C         [24] 1672 	lcall	_eebyter
      000588 AD 82            [24] 1673 	mov	r5,dpl
                                   1674 ;	main.c:311: printf("read data: 0x%x\r\n", rd);
      00058A 7C 00            [12] 1675 	mov	r4,#0x00
      00058C C0 05            [24] 1676 	push	ar5
      00058E C0 04            [24] 1677 	push	ar4
      000590 74r96            [12] 1678 	mov	a,#___str_16
      000592 C0 E0            [24] 1679 	push	acc
      000594 74s02            [12] 1680 	mov	a,#(___str_16 >> 8)
      000596 C0 E0            [24] 1681 	push	acc
      000598 74 80            [12] 1682 	mov	a,#0x80
      00059A C0 E0            [24] 1683 	push	acc
      00059C 12r00r00         [24] 1684 	lcall	_printf
      00059F E5 81            [12] 1685 	mov	a,sp
      0005A1 24 FB            [12] 1686 	add	a,#0xfb
      0005A3 F5 81            [12] 1687 	mov	sp,a
      0005A5 D0 06            [24] 1688 	pop	ar6
      0005A7 D0 07            [24] 1689 	pop	ar7
                                   1690 ;	main.c:312: break;
      0005A9 02r02r59         [24] 1691 	ljmp	00212$
                                   1692 ;	main.c:314: case 'h':
      0005AC                       1693 00163$:
                                   1694 ;	main.c:315: printf("Enter the start address for dump:\r\n");
      0005AC 74rA8            [12] 1695 	mov	a,#___str_17
      0005AE C0 E0            [24] 1696 	push	acc
      0005B0 74s02            [12] 1697 	mov	a,#(___str_17 >> 8)
      0005B2 C0 E0            [24] 1698 	push	acc
      0005B4 74 80            [12] 1699 	mov	a,#0x80
      0005B6 C0 E0            [24] 1700 	push	acc
      0005B8 12r00r00         [24] 1701 	lcall	_printf
      0005BB 15 81            [12] 1702 	dec	sp
      0005BD 15 81            [12] 1703 	dec	sp
      0005BF 15 81            [12] 1704 	dec	sp
                                   1705 ;	main.c:316: while (1) {
      0005C1                       1706 00179$:
                                   1707 ;	main.c:317: ch = getchar();
      0005C1 12r00r00         [24] 1708 	lcall	_getchar
      0005C4 AC 82            [24] 1709 	mov	r4,dpl
                                   1710 ;	main.c:319: if ((int)ch == 13) { // Check until carriage return
      0005C6 8C 03            [24] 1711 	mov	ar3,r4
      0005C8 7D 00            [12] 1712 	mov	r5,#0x00
      0005CA BB 0D 05         [24] 1713 	cjne	r3,#0x0d,00522$
      0005CD BD 00 02         [24] 1714 	cjne	r5,#0x00,00522$
      0005D0 80 74            [24] 1715 	sjmp	00180$
      0005D2                       1716 00522$:
                                   1717 ;	main.c:323: if ((ch >= '0') && (ch <= '9')) {
      0005D2 BC 30 00         [24] 1718 	cjne	r4,#0x30,00523$
      0005D5                       1719 00523$:
      0005D5 40 0F            [24] 1720 	jc	00175$
      0005D7 EC               [12] 1721 	mov	a,r4
      0005D8 24 C6            [12] 1722 	add	a,#0xff - 0x39
      0005DA 40 0A            [24] 1723 	jc	00175$
                                   1724 ;	main.c:324: digit = ch - '0';
      0005DC EB               [12] 1725 	mov	a,r3
      0005DD 24 D0            [12] 1726 	add	a,#0xd0
      0005DF FB               [12] 1727 	mov	r3,a
      0005E0 ED               [12] 1728 	mov	a,r5
      0005E1 34 FF            [12] 1729 	addc	a,#0xff
      0005E3 FD               [12] 1730 	mov	r5,a
      0005E4 80 44            [24] 1731 	sjmp	00176$
      0005E6                       1732 00175$:
                                   1733 ;	main.c:325: } else if ((ch >= 'A') && (ch <= 'F')) {
      0005E6 BC 41 00         [24] 1734 	cjne	r4,#0x41,00526$
      0005E9                       1735 00526$:
      0005E9 40 13            [24] 1736 	jc	00171$
      0005EB EC               [12] 1737 	mov	a,r4
      0005EC 24 B9            [12] 1738 	add	a,#0xff - 0x46
      0005EE 40 0E            [24] 1739 	jc	00171$
                                   1740 ;	main.c:326: digit = ch - 7 - '0';
      0005F0 8C 01            [24] 1741 	mov	ar1,r4
      0005F2 7A 00            [12] 1742 	mov	r2,#0x00
      0005F4 E9               [12] 1743 	mov	a,r1
      0005F5 24 C9            [12] 1744 	add	a,#0xc9
      0005F7 FB               [12] 1745 	mov	r3,a
      0005F8 EA               [12] 1746 	mov	a,r2
      0005F9 34 FF            [12] 1747 	addc	a,#0xff
      0005FB FD               [12] 1748 	mov	r5,a
      0005FC 80 2C            [24] 1749 	sjmp	00176$
      0005FE                       1750 00171$:
                                   1751 ;	main.c:327: } else if ((ch >= 'a') && (ch <= 'f')) {
      0005FE BC 61 00         [24] 1752 	cjne	r4,#0x61,00529$
      000601                       1753 00529$:
      000601 40 11            [24] 1754 	jc	00167$
      000603 EC               [12] 1755 	mov	a,r4
      000604 24 99            [12] 1756 	add	a,#0xff - 0x66
      000606 40 0C            [24] 1757 	jc	00167$
                                   1758 ;	main.c:328: digit = ch - 32 - 7 - '0';
      000608 7A 00            [12] 1759 	mov	r2,#0x00
      00060A EC               [12] 1760 	mov	a,r4
      00060B 24 A9            [12] 1761 	add	a,#0xa9
      00060D FB               [12] 1762 	mov	r3,a
      00060E EA               [12] 1763 	mov	a,r2
      00060F 34 FF            [12] 1764 	addc	a,#0xff
      000611 FD               [12] 1765 	mov	r5,a
      000612 80 16            [24] 1766 	sjmp	00176$
      000614                       1767 00167$:
                                   1768 ;	main.c:330: printf("Invalid input. Please enter 0-9, A-F or a-f.\r\n");
      000614 74r67            [12] 1769 	mov	a,#___str_15
      000616 C0 E0            [24] 1770 	push	acc
      000618 74s02            [12] 1771 	mov	a,#(___str_15 >> 8)
      00061A C0 E0            [24] 1772 	push	acc
      00061C 74 80            [12] 1773 	mov	a,#0x80
      00061E C0 E0            [24] 1774 	push	acc
      000620 12r00r00         [24] 1775 	lcall	_printf
      000623 15 81            [12] 1776 	dec	sp
      000625 15 81            [12] 1777 	dec	sp
      000627 15 81            [12] 1778 	dec	sp
                                   1779 ;	main.c:331: return;
      000629 22               [24] 1780 	ret
      00062A                       1781 00176$:
                                   1782 ;	main.c:333: start_addr = start_addr * 16 + digit;
      00062A AC*03            [24] 1783 	mov	r4,_main_start_addr_131072_47
      00062C E5*04            [12] 1784 	mov	a,(_main_start_addr_131072_47 + 1)
      00062E C4               [12] 1785 	swap	a
      00062F 54 F0            [12] 1786 	anl	a,#0xf0
      000631 CC               [12] 1787 	xch	a,r4
      000632 C4               [12] 1788 	swap	a
      000633 CC               [12] 1789 	xch	a,r4
      000634 6C               [12] 1790 	xrl	a,r4
      000635 CC               [12] 1791 	xch	a,r4
      000636 54 F0            [12] 1792 	anl	a,#0xf0
      000638 CC               [12] 1793 	xch	a,r4
      000639 6C               [12] 1794 	xrl	a,r4
      00063A FA               [12] 1795 	mov	r2,a
      00063B EB               [12] 1796 	mov	a,r3
      00063C 2C               [12] 1797 	add	a,r4
      00063D F5*03            [12] 1798 	mov	_main_start_addr_131072_47,a
      00063F ED               [12] 1799 	mov	a,r5
      000640 3A               [12] 1800 	addc	a,r2
      000641 F5*04            [12] 1801 	mov	(_main_start_addr_131072_47 + 1),a
      000643 02r05rC1         [24] 1802 	ljmp	00179$
      000646                       1803 00180$:
                                   1804 ;	main.c:337: printf("Entered start address: 0x%x\r\n", start_addr);
      000646 C0*03            [24] 1805 	push	_main_start_addr_131072_47
      000648 C0*04            [24] 1806 	push	(_main_start_addr_131072_47 + 1)
      00064A 74rCC            [12] 1807 	mov	a,#___str_18
      00064C C0 E0            [24] 1808 	push	acc
      00064E 74s02            [12] 1809 	mov	a,#(___str_18 >> 8)
      000650 C0 E0            [24] 1810 	push	acc
      000652 74 80            [12] 1811 	mov	a,#0x80
      000654 C0 E0            [24] 1812 	push	acc
      000656 12r00r00         [24] 1813 	lcall	_printf
      000659 E5 81            [12] 1814 	mov	a,sp
      00065B 24 FB            [12] 1815 	add	a,#0xfb
      00065D F5 81            [12] 1816 	mov	sp,a
                                   1817 ;	main.c:340: if ((start_addr < 0x0) || (start_addr > 0x7FF)) {
      00065F C3               [12] 1818 	clr	c
      000660 74 FF            [12] 1819 	mov	a,#0xff
      000662 95*03            [12] 1820 	subb	a,_main_start_addr_131072_47
      000664 74 07            [12] 1821 	mov	a,#0x07
      000666 95*04            [12] 1822 	subb	a,(_main_start_addr_131072_47 + 1)
      000668 50 16            [24] 1823 	jnc	00182$
                                   1824 ;	main.c:341: printf("Invalid start address. The address should be between 0 and 7FF.\r\n");
      00066A 74rEA            [12] 1825 	mov	a,#___str_19
      00066C C0 E0            [24] 1826 	push	acc
      00066E 74s02            [12] 1827 	mov	a,#(___str_19 >> 8)
      000670 C0 E0            [24] 1828 	push	acc
      000672 74 80            [12] 1829 	mov	a,#0x80
      000674 C0 E0            [24] 1830 	push	acc
      000676 12r00r00         [24] 1831 	lcall	_printf
      000679 15 81            [12] 1832 	dec	sp
      00067B 15 81            [12] 1833 	dec	sp
      00067D 15 81            [12] 1834 	dec	sp
                                   1835 ;	main.c:342: return;
      00067F 22               [24] 1836 	ret
      000680                       1837 00182$:
                                   1838 ;	main.c:345: printf("Enter the end address for dump:\r\n");
      000680 74r2C            [12] 1839 	mov	a,#___str_20
      000682 C0 E0            [24] 1840 	push	acc
      000684 74s03            [12] 1841 	mov	a,#(___str_20 >> 8)
      000686 C0 E0            [24] 1842 	push	acc
      000688 74 80            [12] 1843 	mov	a,#0x80
      00068A C0 E0            [24] 1844 	push	acc
      00068C 12r00r00         [24] 1845 	lcall	_printf
      00068F 15 81            [12] 1846 	dec	sp
      000691 15 81            [12] 1847 	dec	sp
      000693 15 81            [12] 1848 	dec	sp
                                   1849 ;	main.c:346: while (1) {
      000695                       1850 00199$:
                                   1851 ;	main.c:347: ch = getchar();
      000695 12r00r00         [24] 1852 	lcall	_getchar
      000698 AC 82            [24] 1853 	mov	r4,dpl
                                   1854 ;	main.c:349: if ((int)ch == 13) { // Check until carriage return
      00069A 8C 03            [24] 1855 	mov	ar3,r4
      00069C 7D 00            [12] 1856 	mov	r5,#0x00
      00069E BB 0D 05         [24] 1857 	cjne	r3,#0x0d,00533$
      0006A1 BD 00 02         [24] 1858 	cjne	r5,#0x00,00533$
      0006A4 80 6D            [24] 1859 	sjmp	00200$
      0006A6                       1860 00533$:
                                   1861 ;	main.c:353: if ((ch >= '0') && (ch <= '9')) {
      0006A6 BC 30 00         [24] 1862 	cjne	r4,#0x30,00534$
      0006A9                       1863 00534$:
      0006A9 40 0F            [24] 1864 	jc	00195$
      0006AB EC               [12] 1865 	mov	a,r4
      0006AC 24 C6            [12] 1866 	add	a,#0xff - 0x39
      0006AE 40 0A            [24] 1867 	jc	00195$
                                   1868 ;	main.c:354: digit = ch - '0';
      0006B0 EB               [12] 1869 	mov	a,r3
      0006B1 24 D0            [12] 1870 	add	a,#0xd0
      0006B3 FA               [12] 1871 	mov	r2,a
      0006B4 ED               [12] 1872 	mov	a,r5
      0006B5 34 FF            [12] 1873 	addc	a,#0xff
      0006B7 F9               [12] 1874 	mov	r1,a
      0006B8 80 3E            [24] 1875 	sjmp	00196$
      0006BA                       1876 00195$:
                                   1877 ;	main.c:355: } else if ((ch >= 'A') && (ch <= 'F')) {
      0006BA BC 41 00         [24] 1878 	cjne	r4,#0x41,00537$
      0006BD                       1879 00537$:
      0006BD 40 0F            [24] 1880 	jc	00191$
      0006BF EC               [12] 1881 	mov	a,r4
      0006C0 24 B9            [12] 1882 	add	a,#0xff - 0x46
      0006C2 40 0A            [24] 1883 	jc	00191$
                                   1884 ;	main.c:356: digit = ch - 7 - '0';
      0006C4 EB               [12] 1885 	mov	a,r3
      0006C5 24 C9            [12] 1886 	add	a,#0xc9
      0006C7 FA               [12] 1887 	mov	r2,a
      0006C8 ED               [12] 1888 	mov	a,r5
      0006C9 34 FF            [12] 1889 	addc	a,#0xff
      0006CB F9               [12] 1890 	mov	r1,a
      0006CC 80 2A            [24] 1891 	sjmp	00196$
      0006CE                       1892 00191$:
                                   1893 ;	main.c:357: } else if ((ch >= 'a') && (ch <= 'f')) {
      0006CE BC 61 00         [24] 1894 	cjne	r4,#0x61,00540$
      0006D1                       1895 00540$:
      0006D1 40 0F            [24] 1896 	jc	00187$
      0006D3 EC               [12] 1897 	mov	a,r4
      0006D4 24 99            [12] 1898 	add	a,#0xff - 0x66
      0006D6 40 0A            [24] 1899 	jc	00187$
                                   1900 ;	main.c:358: digit = ch - 32 - 7 - '0';
      0006D8 EB               [12] 1901 	mov	a,r3
      0006D9 24 A9            [12] 1902 	add	a,#0xa9
      0006DB FA               [12] 1903 	mov	r2,a
      0006DC ED               [12] 1904 	mov	a,r5
      0006DD 34 FF            [12] 1905 	addc	a,#0xff
      0006DF F9               [12] 1906 	mov	r1,a
      0006E0 80 16            [24] 1907 	sjmp	00196$
      0006E2                       1908 00187$:
                                   1909 ;	main.c:360: printf("Invalid input. Please enter 0-9, A-F or a-f.\r\n");
      0006E2 74r67            [12] 1910 	mov	a,#___str_15
      0006E4 C0 E0            [24] 1911 	push	acc
      0006E6 74s02            [12] 1912 	mov	a,#(___str_15 >> 8)
      0006E8 C0 E0            [24] 1913 	push	acc
      0006EA 74 80            [12] 1914 	mov	a,#0x80
      0006EC C0 E0            [24] 1915 	push	acc
      0006EE 12r00r00         [24] 1916 	lcall	_printf
      0006F1 15 81            [12] 1917 	dec	sp
      0006F3 15 81            [12] 1918 	dec	sp
      0006F5 15 81            [12] 1919 	dec	sp
                                   1920 ;	main.c:361: return;
      0006F7 22               [24] 1921 	ret
      0006F8                       1922 00196$:
                                   1923 ;	main.c:363: end_addr = end_addr * 16 + digit;
      0006F8 AC*05            [24] 1924 	mov	r4,_main_end_addr_131072_47
      0006FA E5*06            [12] 1925 	mov	a,(_main_end_addr_131072_47 + 1)
      0006FC C4               [12] 1926 	swap	a
      0006FD 54 F0            [12] 1927 	anl	a,#0xf0
      0006FF CC               [12] 1928 	xch	a,r4
      000700 C4               [12] 1929 	swap	a
      000701 CC               [12] 1930 	xch	a,r4
      000702 6C               [12] 1931 	xrl	a,r4
      000703 CC               [12] 1932 	xch	a,r4
      000704 54 F0            [12] 1933 	anl	a,#0xf0
      000706 CC               [12] 1934 	xch	a,r4
      000707 6C               [12] 1935 	xrl	a,r4
      000708 FD               [12] 1936 	mov	r5,a
      000709 EA               [12] 1937 	mov	a,r2
      00070A 2C               [12] 1938 	add	a,r4
      00070B F5*05            [12] 1939 	mov	_main_end_addr_131072_47,a
      00070D E9               [12] 1940 	mov	a,r1
      00070E 3D               [12] 1941 	addc	a,r5
      00070F F5*06            [12] 1942 	mov	(_main_end_addr_131072_47 + 1),a
      000711 80 82            [24] 1943 	sjmp	00199$
      000713                       1944 00200$:
                                   1945 ;	main.c:367: printf("Entered end address: 0x%x\r\n", end_addr);
      000713 C0*05            [24] 1946 	push	_main_end_addr_131072_47
      000715 C0*06            [24] 1947 	push	(_main_end_addr_131072_47 + 1)
      000717 74r4E            [12] 1948 	mov	a,#___str_21
      000719 C0 E0            [24] 1949 	push	acc
      00071B 74s03            [12] 1950 	mov	a,#(___str_21 >> 8)
      00071D C0 E0            [24] 1951 	push	acc
      00071F 74 80            [12] 1952 	mov	a,#0x80
      000721 C0 E0            [24] 1953 	push	acc
      000723 12r00r00         [24] 1954 	lcall	_printf
      000726 E5 81            [12] 1955 	mov	a,sp
      000728 24 FB            [12] 1956 	add	a,#0xfb
      00072A F5 81            [12] 1957 	mov	sp,a
                                   1958 ;	main.c:370: if ((end_addr < 0x0) || (end_addr > 0x7FF) || (end_addr < start_addr)) {
      00072C C3               [12] 1959 	clr	c
      00072D 74 FF            [12] 1960 	mov	a,#0xff
      00072F 95*05            [12] 1961 	subb	a,_main_end_addr_131072_47
      000731 74 07            [12] 1962 	mov	a,#0x07
      000733 95*06            [12] 1963 	subb	a,(_main_end_addr_131072_47 + 1)
      000735 40 0A            [24] 1964 	jc	00201$
      000737 E5*05            [12] 1965 	mov	a,_main_end_addr_131072_47
      000739 95*03            [12] 1966 	subb	a,_main_start_addr_131072_47
      00073B E5*06            [12] 1967 	mov	a,(_main_end_addr_131072_47 + 1)
      00073D 95*04            [12] 1968 	subb	a,(_main_start_addr_131072_47 + 1)
      00073F 50 16            [24] 1969 	jnc	00202$
      000741                       1970 00201$:
                                   1971 ;	main.c:371: printf("Invalid end address. The address should be between 0-7FF and more than the start address.\r\n");
      000741 74r6A            [12] 1972 	mov	a,#___str_22
      000743 C0 E0            [24] 1973 	push	acc
      000745 74s03            [12] 1974 	mov	a,#(___str_22 >> 8)
      000747 C0 E0            [24] 1975 	push	acc
      000749 74 80            [12] 1976 	mov	a,#0x80
      00074B C0 E0            [24] 1977 	push	acc
      00074D 12r00r00         [24] 1978 	lcall	_printf
      000750 15 81            [12] 1979 	dec	sp
      000752 15 81            [12] 1980 	dec	sp
      000754 15 81            [12] 1981 	dec	sp
                                   1982 ;	main.c:372: return;
      000756 22               [24] 1983 	ret
      000757                       1984 00202$:
                                   1985 ;	main.c:375: printf("%x:", start_addr);
      000757 C0*03            [24] 1986 	push	_main_start_addr_131072_47
      000759 C0*04            [24] 1987 	push	(_main_start_addr_131072_47 + 1)
      00075B 74rC6            [12] 1988 	mov	a,#___str_23
      00075D C0 E0            [24] 1989 	push	acc
      00075F 74s03            [12] 1990 	mov	a,#(___str_23 >> 8)
      000761 C0 E0            [24] 1991 	push	acc
      000763 74 80            [12] 1992 	mov	a,#0x80
      000765 C0 E0            [24] 1993 	push	acc
      000767 12r00r00         [24] 1994 	lcall	_printf
      00076A E5 81            [12] 1995 	mov	a,sp
      00076C 24 FB            [12] 1996 	add	a,#0xfb
      00076E F5 81            [12] 1997 	mov	sp,a
                                   1998 ;	main.c:377: for (int i=0; i<end_addr - start_addr; i++)
      000770 E5*05            [12] 1999 	mov	a,_main_end_addr_131072_47
      000772 C3               [12] 2000 	clr	c
      000773 95*03            [12] 2001 	subb	a,_main_start_addr_131072_47
      000775 FC               [12] 2002 	mov	r4,a
      000776 E5*06            [12] 2003 	mov	a,(_main_end_addr_131072_47 + 1)
      000778 95*04            [12] 2004 	subb	a,(_main_start_addr_131072_47 + 1)
      00077A FD               [12] 2005 	mov	r5,a
      00077B 85*03*01         [24] 2006 	mov	_main_addr_131072_47,_main_start_addr_131072_47
      00077E 85*04*02         [24] 2007 	mov	(_main_addr_131072_47 + 1),(_main_start_addr_131072_47 + 1)
      000781 78 00            [12] 2008 	mov	r0,#0x00
      000783 79 00            [12] 2009 	mov	r1,#0x00
      000785                       2010 00215$:
      000785 88 02            [24] 2011 	mov	ar2,r0
      000787 89 03            [24] 2012 	mov	ar3,r1
      000789 C3               [12] 2013 	clr	c
      00078A EA               [12] 2014 	mov	a,r2
      00078B 9C               [12] 2015 	subb	a,r4
      00078C EB               [12] 2016 	mov	a,r3
      00078D 9D               [12] 2017 	subb	a,r5
      00078E 40 03            [24] 2018 	jc	00545$
      000790 02r08r4B         [24] 2019 	ljmp	00272$
      000793                       2020 00545$:
                                   2021 ;	main.c:379: if (i > 0 && i % 16 == 0) {
      000793 C3               [12] 2022 	clr	c
      000794 E4               [12] 2023 	clr	a
      000795 98               [12] 2024 	subb	a,r0
      000796 74 80            [12] 2025 	mov	a,#(0x00 ^ 0x80)
      000798 89 F0            [24] 2026 	mov	b,r1
      00079A 63 F0 80         [24] 2027 	xrl	b,#0x80
      00079D 95 F0            [12] 2028 	subb	a,b
      00079F 50 64            [24] 2029 	jnc	00206$
      0007A1 75*00 10         [24] 2030 	mov	__modsint_PARM_2,#0x10
      0007A4 75*01 00         [24] 2031 	mov	(__modsint_PARM_2 + 1),#0x00
      0007A7 88 82            [24] 2032 	mov	dpl,r0
      0007A9 89 83            [24] 2033 	mov	dph,r1
      0007AB C0 05            [24] 2034 	push	ar5
      0007AD C0 04            [24] 2035 	push	ar4
      0007AF C0 01            [24] 2036 	push	ar1
      0007B1 C0 00            [24] 2037 	push	ar0
      0007B3 12r00r00         [24] 2038 	lcall	__modsint
      0007B6 E5 82            [12] 2039 	mov	a,dpl
      0007B8 85 83 F0         [24] 2040 	mov	b,dph
      0007BB D0 00            [24] 2041 	pop	ar0
      0007BD D0 01            [24] 2042 	pop	ar1
      0007BF D0 04            [24] 2043 	pop	ar4
      0007C1 D0 05            [24] 2044 	pop	ar5
      0007C3 45 F0            [12] 2045 	orl	a,b
      0007C5 70 3E            [24] 2046 	jnz	00206$
                                   2047 ;	main.c:380: printf("\r\n");  // Start a new line after every 16 bytes
      0007C7 C0 05            [24] 2048 	push	ar5
      0007C9 C0 04            [24] 2049 	push	ar4
      0007CB C0 01            [24] 2050 	push	ar1
      0007CD C0 00            [24] 2051 	push	ar0
      0007CF 74rF9            [12] 2052 	mov	a,#___str_6
      0007D1 C0 E0            [24] 2053 	push	acc
      0007D3 74s00            [12] 2054 	mov	a,#(___str_6 >> 8)
      0007D5 C0 E0            [24] 2055 	push	acc
      0007D7 74 80            [12] 2056 	mov	a,#0x80
      0007D9 C0 E0            [24] 2057 	push	acc
      0007DB 12r00r00         [24] 2058 	lcall	_printf
      0007DE 15 81            [12] 2059 	dec	sp
      0007E0 15 81            [12] 2060 	dec	sp
      0007E2 15 81            [12] 2061 	dec	sp
                                   2062 ;	main.c:381: printf("%x:", addr);
      0007E4 C0*01            [24] 2063 	push	_main_addr_131072_47
      0007E6 C0*02            [24] 2064 	push	(_main_addr_131072_47 + 1)
      0007E8 74rC6            [12] 2065 	mov	a,#___str_23
      0007EA C0 E0            [24] 2066 	push	acc
      0007EC 74s03            [12] 2067 	mov	a,#(___str_23 >> 8)
      0007EE C0 E0            [24] 2068 	push	acc
      0007F0 74 80            [12] 2069 	mov	a,#0x80
      0007F2 C0 E0            [24] 2070 	push	acc
      0007F4 12r00r00         [24] 2071 	lcall	_printf
      0007F7 E5 81            [12] 2072 	mov	a,sp
      0007F9 24 FB            [12] 2073 	add	a,#0xfb
      0007FB F5 81            [12] 2074 	mov	sp,a
      0007FD D0 00            [24] 2075 	pop	ar0
      0007FF D0 01            [24] 2076 	pop	ar1
      000801 D0 04            [24] 2077 	pop	ar4
      000803 D0 05            [24] 2078 	pop	ar5
      000805                       2079 00206$:
                                   2080 ;	main.c:383: printf("%x ", eebyter(addr));
      000805 85*01 82         [24] 2081 	mov	dpl,_main_addr_131072_47
      000808 85*02 83         [24] 2082 	mov	dph,(_main_addr_131072_47 + 1)
      00080B C0 05            [24] 2083 	push	ar5
      00080D C0 04            [24] 2084 	push	ar4
      00080F C0 01            [24] 2085 	push	ar1
      000811 C0 00            [24] 2086 	push	ar0
      000813 12r01r9C         [24] 2087 	lcall	_eebyter
      000816 AB 82            [24] 2088 	mov	r3,dpl
      000818 7A 00            [12] 2089 	mov	r2,#0x00
      00081A C0 03            [24] 2090 	push	ar3
      00081C C0 02            [24] 2091 	push	ar2
      00081E 74rCA            [12] 2092 	mov	a,#___str_24
      000820 C0 E0            [24] 2093 	push	acc
      000822 74s03            [12] 2094 	mov	a,#(___str_24 >> 8)
      000824 C0 E0            [24] 2095 	push	acc
      000826 74 80            [12] 2096 	mov	a,#0x80
      000828 C0 E0            [24] 2097 	push	acc
      00082A 12r00r00         [24] 2098 	lcall	_printf
      00082D E5 81            [12] 2099 	mov	a,sp
      00082F 24 FB            [12] 2100 	add	a,#0xfb
      000831 F5 81            [12] 2101 	mov	sp,a
      000833 D0 00            [24] 2102 	pop	ar0
      000835 D0 01            [24] 2103 	pop	ar1
      000837 D0 04            [24] 2104 	pop	ar4
      000839 D0 05            [24] 2105 	pop	ar5
                                   2106 ;	main.c:384: addr += 1;
      00083B 05*01            [12] 2107 	inc	_main_addr_131072_47
      00083D E4               [12] 2108 	clr	a
      00083E B5*01 02         [24] 2109 	cjne	a,_main_addr_131072_47,00548$
      000841 05*02            [12] 2110 	inc	(_main_addr_131072_47 + 1)
      000843                       2111 00548$:
                                   2112 ;	main.c:377: for (int i=0; i<end_addr - start_addr; i++)
      000843 08               [12] 2113 	inc	r0
      000844 B8 00 01         [24] 2114 	cjne	r0,#0x00,00549$
      000847 09               [12] 2115 	inc	r1
      000848                       2116 00549$:
      000848 02r07r85         [24] 2117 	ljmp	00215$
      00084B                       2118 00272$:
      00084B AE*01            [24] 2119 	mov	r6,_main_addr_131072_47
      00084D AF*02            [24] 2120 	mov	r7,(_main_addr_131072_47 + 1)
                                   2121 ;	main.c:386: printf("\r\n");
      00084F C0 07            [24] 2122 	push	ar7
      000851 C0 06            [24] 2123 	push	ar6
      000853 74rF9            [12] 2124 	mov	a,#___str_6
      000855 C0 E0            [24] 2125 	push	acc
      000857 74s00            [12] 2126 	mov	a,#(___str_6 >> 8)
      000859 C0 E0            [24] 2127 	push	acc
      00085B 74 80            [12] 2128 	mov	a,#0x80
      00085D C0 E0            [24] 2129 	push	acc
      00085F 12r00r00         [24] 2130 	lcall	_printf
      000862 15 81            [12] 2131 	dec	sp
      000864 15 81            [12] 2132 	dec	sp
      000866 15 81            [12] 2133 	dec	sp
      000868 D0 06            [24] 2134 	pop	ar6
      00086A D0 07            [24] 2135 	pop	ar7
                                   2136 ;	main.c:388: break;
      00086C 02r02r59         [24] 2137 	ljmp	00212$
                                   2138 ;	main.c:395: default:
      00086F                       2139 00209$:
                                   2140 ;	main.c:396: printf("Invalid input\r\n");
      00086F C0 07            [24] 2141 	push	ar7
      000871 C0 06            [24] 2142 	push	ar6
      000873 74rCE            [12] 2143 	mov	a,#___str_25
      000875 C0 E0            [24] 2144 	push	acc
      000877 74s03            [12] 2145 	mov	a,#(___str_25 >> 8)
      000879 C0 E0            [24] 2146 	push	acc
      00087B 74 80            [12] 2147 	mov	a,#0x80
      00087D C0 E0            [24] 2148 	push	acc
      00087F 12r00r00         [24] 2149 	lcall	_printf
      000882 15 81            [12] 2150 	dec	sp
      000884 15 81            [12] 2151 	dec	sp
      000886 15 81            [12] 2152 	dec	sp
      000888 D0 06            [24] 2153 	pop	ar6
      00088A D0 07            [24] 2154 	pop	ar7
                                   2155 ;	main.c:399: }
                                   2156 ;	main.c:443: }
      00088C 02r02r59         [24] 2157 	ljmp	00212$
                                   2158 	.area CSEG    (CODE)
                                   2159 	.area CONST   (CODE)
                                   2160 	.area CONST   (CODE)
      000000                       2161 ___str_0:
      000000 53 74 61 72 74 69 6E  2162 	.ascii "Starting I2C application"
             67 20 49 32 43 20 61
             70 70 6C 69 63 61 74
             69 6F 6E
      000018 0D                    2163 	.db 0x0d
      000019 0A                    2164 	.db 0x0a
      00001A 00                    2165 	.db 0x00
                                   2166 	.area CSEG    (CODE)
                                   2167 	.area CONST   (CODE)
      00001B                       2168 ___str_1:
      00001B 48 65 6C 70 20 6D 65  2169 	.ascii "Help menu:"
             6E 75 3A
      000025 0D                    2170 	.db 0x0d
      000026 0A                    2171 	.db 0x0a
      000027 00                    2172 	.db 0x00
                                   2173 	.area CSEG    (CODE)
                                   2174 	.area CONST   (CODE)
      000028                       2175 ___str_2:
      000028 27 77 27 3A 20 45 6E  2176 	.ascii "'w': Enter an EEPROM address in hex to write data at and byt"
             74 65 72 20 61 6E 20
             45 45 50 52 4F 4D 20
             61 64 64 72 65 73 73
             20 69 6E 20 68 65 78
             20 74 6F 20 77 72 69
             74 65 20 64 61 74 61
             20 61 74 20 61 6E 64
             20 62 79 74
      000064 65 20 64 61 74 61     2177 	.ascii "e data"
      00006A 0D                    2178 	.db 0x0d
      00006B 0A                    2179 	.db 0x0a
      00006C 00                    2180 	.db 0x00
                                   2181 	.area CSEG    (CODE)
                                   2182 	.area CONST   (CODE)
      00006D                       2183 ___str_3:
      00006D 27 72 27 3A 20 45 6E  2184 	.ascii "'r': Enter an EEPROM address in hex to read data from"
             74 65 72 20 61 6E 20
             45 45 50 52 4F 4D 20
             61 64 64 72 65 73 73
             20 69 6E 20 68 65 78
             20 74 6F 20 72 65 61
             64 20 64 61 74 61 20
             66 72 6F 6D
      0000A2 0D                    2185 	.db 0x0d
      0000A3 0A                    2186 	.db 0x0a
      0000A4 00                    2187 	.db 0x00
                                   2188 	.area CSEG    (CODE)
                                   2189 	.area CONST   (CODE)
      0000A5                       2190 ___str_4:
      0000A5 27 68 27 3A 20 45 6E  2191 	.ascii "'h': Enter an EEPROM start and end addresses to dump the dat"
             74 65 72 20 61 6E 20
             45 45 50 52 4F 4D 20
             73 74 61 72 74 20 61
             6E 64 20 65 6E 64 20
             61 64 64 72 65 73 73
             65 73 20 74 6F 20 64
             75 6D 70 20 74 68 65
             20 64 61 74
      0000E1 61                    2192 	.ascii "a"
      0000E2 0D                    2193 	.db 0x0d
      0000E3 0A                    2194 	.db 0x0a
      0000E4 00                    2195 	.db 0x00
                                   2196 	.area CSEG    (CODE)
                                   2197 	.area CONST   (CODE)
      0000E5                       2198 ___str_5:
      0000E5 27 65 27 3A 20 52 65  2199 	.ascii "'e': Reset EEPROM"
             73 65 74 20 45 45 50
             52 4F 4D
      0000F6 0D                    2200 	.db 0x0d
      0000F7 0A                    2201 	.db 0x0a
      0000F8 00                    2202 	.db 0x00
                                   2203 	.area CSEG    (CODE)
                                   2204 	.area CONST   (CODE)
      0000F9                       2205 ___str_6:
      0000F9 0D                    2206 	.db 0x0d
      0000FA 0A                    2207 	.db 0x0a
      0000FB 00                    2208 	.db 0x00
                                   2209 	.area CSEG    (CODE)
                                   2210 	.area CONST   (CODE)
      0000FC                       2211 ___str_7:
      0000FC 45 6E 74 65 72 20 74  2212 	.ascii "Enter the address location to store the data at : "
             68 65 20 61 64 64 72
             65 73 73 20 6C 6F 63
             61 74 69 6F 6E 20 74
             6F 20 73 74 6F 72 65
             20 74 68 65 20 64 61
             74 61 20 61 74 20 3A
             20
      00012E 0D                    2213 	.db 0x0d
      00012F 0A                    2214 	.db 0x0a
      000130 00                    2215 	.db 0x00
                                   2216 	.area CSEG    (CODE)
                                   2217 	.area CONST   (CODE)
      000131                       2218 ___str_8:
      000131 49 6E 76 61 6C 69 64  2219 	.ascii "Invalid input. Please enter 0-9, A-F or a-f only."
             20 69 6E 70 75 74 2E
             20 50 6C 65 61 73 65
             20 65 6E 74 65 72 20
             30 2D 39 2C 20 41 2D
             46 20 6F 72 20 61 2D
             66 20 6F 6E 6C 79 2E
      000162 0D                    2220 	.db 0x0d
      000163 0A                    2221 	.db 0x0a
      000164 00                    2222 	.db 0x00
                                   2223 	.area CSEG    (CODE)
                                   2224 	.area CONST   (CODE)
      000165                       2225 ___str_9:
      000165 45 6E 74 65 72 65 64  2226 	.ascii "Entered address: 0x%x"
             20 61 64 64 72 65 73
             73 3A 20 30 78 25 78
      00017A 0D                    2227 	.db 0x0d
      00017B 0A                    2228 	.db 0x0a
      00017C 00                    2229 	.db 0x00
                                   2230 	.area CSEG    (CODE)
                                   2231 	.area CONST   (CODE)
      00017D                       2232 ___str_10:
      00017D 49 6E 76 61 6C 69 64  2233 	.ascii "Invalid buffer address. The address should be between 0 and "
             20 62 75 66 66 65 72
             20 61 64 64 72 65 73
             73 2E 20 54 68 65 20
             61 64 64 72 65 73 73
             20 73 68 6F 75 6C 64
             20 62 65 20 62 65 74
             77 65 65 6E 20 30 20
             61 6E 64 20
      0001B9 37 46 46 2E           2234 	.ascii "7FF."
      0001BD 0D                    2235 	.db 0x0d
      0001BE 0A                    2236 	.db 0x0a
      0001BF 00                    2237 	.db 0x00
                                   2238 	.area CSEG    (CODE)
                                   2239 	.area CONST   (CODE)
      0001C0                       2240 ___str_11:
      0001C0 45 6E 74 65 72 20 74  2241 	.ascii "Enter the data byte to write:"
             68 65 20 64 61 74 61
             20 62 79 74 65 20 74
             6F 20 77 72 69 74 65
             3A
      0001DD 0D                    2242 	.db 0x0d
      0001DE 0A                    2243 	.db 0x0a
      0001DF 00                    2244 	.db 0x00
                                   2245 	.area CSEG    (CODE)
                                   2246 	.area CONST   (CODE)
      0001E0                       2247 ___str_12:
      0001E0 45 6E 74 65 72 65 64  2248 	.ascii "Entered data: 0x%x"
             20 64 61 74 61 3A 20
             30 78 25 78
      0001F2 0D                    2249 	.db 0x0d
      0001F3 0A                    2250 	.db 0x0a
      0001F4 00                    2251 	.db 0x00
                                   2252 	.area CSEG    (CODE)
                                   2253 	.area CONST   (CODE)
      0001F5                       2254 ___str_13:
      0001F5 49 6E 76 61 6C 69 64  2255 	.ascii "Invalid buffer data. The data should be between 0 and FF."
             20 62 75 66 66 65 72
             20 64 61 74 61 2E 20
             54 68 65 20 64 61 74
             61 20 73 68 6F 75 6C
             64 20 62 65 20 62 65
             74 77 65 65 6E 20 30
             20 61 6E 64 20 46 46
             2E
      00022E 0D                    2256 	.db 0x0d
      00022F 0A                    2257 	.db 0x0a
      000230 00                    2258 	.db 0x00
                                   2259 	.area CSEG    (CODE)
                                   2260 	.area CONST   (CODE)
      000231                       2261 ___str_14:
      000231 45 6E 74 65 72 20 74  2262 	.ascii "Enter the address location to read the data from : "
             68 65 20 61 64 64 72
             65 73 73 20 6C 6F 63
             61 74 69 6F 6E 20 74
             6F 20 72 65 61 64 20
             74 68 65 20 64 61 74
             61 20 66 72 6F 6D 20
             3A 20
      000264 0D                    2263 	.db 0x0d
      000265 0A                    2264 	.db 0x0a
      000266 00                    2265 	.db 0x00
                                   2266 	.area CSEG    (CODE)
                                   2267 	.area CONST   (CODE)
      000267                       2268 ___str_15:
      000267 49 6E 76 61 6C 69 64  2269 	.ascii "Invalid input. Please enter 0-9, A-F or a-f."
             20 69 6E 70 75 74 2E
             20 50 6C 65 61 73 65
             20 65 6E 74 65 72 20
             30 2D 39 2C 20 41 2D
             46 20 6F 72 20 61 2D
             66 2E
      000293 0D                    2270 	.db 0x0d
      000294 0A                    2271 	.db 0x0a
      000295 00                    2272 	.db 0x00
                                   2273 	.area CSEG    (CODE)
                                   2274 	.area CONST   (CODE)
      000296                       2275 ___str_16:
      000296 72 65 61 64 20 64 61  2276 	.ascii "read data: 0x%x"
             74 61 3A 20 30 78 25
             78
      0002A5 0D                    2277 	.db 0x0d
      0002A6 0A                    2278 	.db 0x0a
      0002A7 00                    2279 	.db 0x00
                                   2280 	.area CSEG    (CODE)
                                   2281 	.area CONST   (CODE)
      0002A8                       2282 ___str_17:
      0002A8 45 6E 74 65 72 20 74  2283 	.ascii "Enter the start address for dump:"
             68 65 20 73 74 61 72
             74 20 61 64 64 72 65
             73 73 20 66 6F 72 20
             64 75 6D 70 3A
      0002C9 0D                    2284 	.db 0x0d
      0002CA 0A                    2285 	.db 0x0a
      0002CB 00                    2286 	.db 0x00
                                   2287 	.area CSEG    (CODE)
                                   2288 	.area CONST   (CODE)
      0002CC                       2289 ___str_18:
      0002CC 45 6E 74 65 72 65 64  2290 	.ascii "Entered start address: 0x%x"
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             3A 20 30 78 25 78
      0002E7 0D                    2291 	.db 0x0d
      0002E8 0A                    2292 	.db 0x0a
      0002E9 00                    2293 	.db 0x00
                                   2294 	.area CSEG    (CODE)
                                   2295 	.area CONST   (CODE)
      0002EA                       2296 ___str_19:
      0002EA 49 6E 76 61 6C 69 64  2297 	.ascii "Invalid start address. The address should be between 0 and 7"
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             2E 20 54 68 65 20 61
             64 64 72 65 73 73 20
             73 68 6F 75 6C 64 20
             62 65 20 62 65 74 77
             65 65 6E 20 30 20 61
             6E 64 20 37
      000326 46 46 2E              2298 	.ascii "FF."
      000329 0D                    2299 	.db 0x0d
      00032A 0A                    2300 	.db 0x0a
      00032B 00                    2301 	.db 0x00
                                   2302 	.area CSEG    (CODE)
                                   2303 	.area CONST   (CODE)
      00032C                       2304 ___str_20:
      00032C 45 6E 74 65 72 20 74  2305 	.ascii "Enter the end address for dump:"
             68 65 20 65 6E 64 20
             61 64 64 72 65 73 73
             20 66 6F 72 20 64 75
             6D 70 3A
      00034B 0D                    2306 	.db 0x0d
      00034C 0A                    2307 	.db 0x0a
      00034D 00                    2308 	.db 0x00
                                   2309 	.area CSEG    (CODE)
                                   2310 	.area CONST   (CODE)
      00034E                       2311 ___str_21:
      00034E 45 6E 74 65 72 65 64  2312 	.ascii "Entered end address: 0x%x"
             20 65 6E 64 20 61 64
             64 72 65 73 73 3A 20
             30 78 25 78
      000367 0D                    2313 	.db 0x0d
      000368 0A                    2314 	.db 0x0a
      000369 00                    2315 	.db 0x00
                                   2316 	.area CSEG    (CODE)
                                   2317 	.area CONST   (CODE)
      00036A                       2318 ___str_22:
      00036A 49 6E 76 61 6C 69 64  2319 	.ascii "Invalid end address. The address should be between 0-7FF and"
             20 65 6E 64 20 61 64
             64 72 65 73 73 2E 20
             54 68 65 20 61 64 64
             72 65 73 73 20 73 68
             6F 75 6C 64 20 62 65
             20 62 65 74 77 65 65
             6E 20 30 2D 37 46 46
             20 61 6E 64
      0003A6 20 6D 6F 72 65 20 74  2320 	.ascii " more than the start address."
             68 61 6E 20 74 68 65
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             2E
      0003C3 0D                    2321 	.db 0x0d
      0003C4 0A                    2322 	.db 0x0a
      0003C5 00                    2323 	.db 0x00
                                   2324 	.area CSEG    (CODE)
                                   2325 	.area CONST   (CODE)
      0003C6                       2326 ___str_23:
      0003C6 25 78 3A              2327 	.ascii "%x:"
      0003C9 00                    2328 	.db 0x00
                                   2329 	.area CSEG    (CODE)
                                   2330 	.area CONST   (CODE)
      0003CA                       2331 ___str_24:
      0003CA 25 78 20              2332 	.ascii "%x "
      0003CD 00                    2333 	.db 0x00
                                   2334 	.area CSEG    (CODE)
                                   2335 	.area CONST   (CODE)
      0003CE                       2336 ___str_25:
      0003CE 49 6E 76 61 6C 69 64  2337 	.ascii "Invalid input"
             20 69 6E 70 75 74
      0003DB 0D                    2338 	.db 0x0d
      0003DC 0A                    2339 	.db 0x0a
      0003DD 00                    2340 	.db 0x00
                                   2341 	.area CSEG    (CODE)
                                   2342 	.area XINIT   (CODE)
                                   2343 	.area CABS    (ABS,CODE)
